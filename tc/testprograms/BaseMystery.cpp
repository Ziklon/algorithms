#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define pb push_back
#define mp make_pair
#define mem(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long _lcm(long long a,long long b){return a*(b/gcd(a,b));}

char getDigit(int n){
	if(n>=10)
		return 'A'+(n-10);
	return '0'+n;
}

class BaseMystery {
public:vector <int> getBase(string equation) {	
		string s="";
		equation+='/';
		cout<<getDigit(19)<<endl;
		vector<string> vs;
		vector<int> dev;
		for(int i=0;i<equation.sz;i++){
			if(!isdigit(equation[i]) && !isalpha(equation[i])) {vs.pb(s);s="";}
			else s+=equation[i];
		}
		if(vs[0].sz<vs[1].sz)swap(vs[0],vs[1]);
		for(int i=2;i<=20;i++){
			int lleva=0;
			int j=vs[0].sz-1;
			int k=vs[1].sz-1;
			string rpta="";			
			for(;j>=0;j--,k--){
				int a=(isdigit(vs[0][j]))?vs[0][j]-'0':(vs[0][j]-'A'+10);
				int b=0;
				int r=0;
				if(k>=0)
					b=(isdigit(vs[1][k]))?vs[1][k]-'0':(vs[1][k]-'A'+10);	
								
				if(a+b+lleva>=i){
					r=(a+b+lleva)%i;
					lleva=(a+b+lleva-r)/i;				
				}else{
					r=a+b+lleva;
					lleva=0;
				}
				cout<<r<<endl;
				rpta=getDigit(r)+rpta;							
			}
			if(lleva!=0)
				rpta=getDigit(lleva)+rpta;				
			bool ok=1;
			
			for(int j=0;j<2;j++)
				for(int k=0;k<vs[j].sz;k++){
					if(isdigit(vs[j][k]))
						ok=((vs[j][k]-'0')<i) &&ok;
					else
						ok=((vs[j][k]-'A'+10)<i)&&ok;
				}
				
		cout<<rpta<<" - "<<i<<endl;
		 if(ok && rpta==vs[2])
		 		dev.pb(i);
		}
		return dev;		
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	BaseMystery *obj;
	vector <int> answer;
	obj = new BaseMystery();
	clock_t startTime = clock();
	answer = obj->getBase(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <int> p1;
	
	{
	// ----- test 0 -----
	p0 = "A9A9A+9A9A9=JJJJJ";
	int t1[] = {20};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
