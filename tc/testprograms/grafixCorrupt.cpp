#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define pb push_back
#define mp make_pair
#define mem(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define f(i,n) for(int (i)=0;i<(int)(n);(i)++)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long lcm(long long a,long long b){return a*(b/gcd(a,b));}
class grafixCorrupt {
public:int selectWord(vector <string> dictionary, string candidate) {	
		int dev=-1,mx=0;
		for(int i=0;i<dictionary.sz;i++){
			int x=0;
			for(int j=0;j<candidate.sz;j++){
				if(candidate[j]==dictionary[i][j])
					x++;
			}
			if(x>0 && x>mx){
				mx=x;
				dev=i;			
			}
		}
		return dev;		
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	grafixCorrupt *obj;
	int answer;
	obj = new grafixCorrupt();
	clock_t startTime = clock();
	answer = obj->selectWord(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"cat","cab","lab"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "dab";
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"cat","cab","lab"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "lag";
	p2 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"cat","cab","lab"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "bic";
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"zkv","izs","fed","waa","ttx","bgt","quy","dtq","dgo","yrs","cid","nln","pvz","txt","zun","erd","jen","klh","kxy","emf","mqt","lza","dzb","ndx","vfr","jhs","dkm","elb"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "cwd";
	p2 = 10;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"zhadjsg","vzptftx","fbaslxs","ejejncm","xpxkeae","ixrrtzw","ovctbzx","sfzekhh","lxzixjk","jixdpik","bkianck","laclyin","uqmdkfx","dimswqo","fojhetr","grntrce","obdtqwx","bhojwcy","zuuuvst","mvqtoly","aftmupx","govuidx","qklpret","yptccki","uxdnslh","wudrusz","uwxbvou","ouytqun","pjdexqe","xraaqdw","lxmoncl","sjnjfgb","qrlqgvc","fgvoadm","yohsrxw","udpvrsr","mklucgt"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "vklikgf";
	p2 = 36;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
