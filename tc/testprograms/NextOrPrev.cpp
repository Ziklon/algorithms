#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
using namespace std;

class NextOrPrev {
public:int getMinimum(int nextCost, int prevCost, string start, string goal) {	
		if(start==goal)return 0;
		int N=start.size();
		int ans=0;

		while(1){
			int idx=-1;		
			for(int i=0;i<N;i++)if(start[i]!=goal[i]){				
				vector<char> v;				
				for(int j=0;j<N;j++)if(j!=i)v.push_back(start[j]);

				sort(v.begin(),v.end());
				bool ok=1;
				char aa=start[i];
				char bb=goal[i];
				for(char c=min(aa,bb);c<=max(aa,bb);c++)if(binary_search(v.begin(),v.end(),c)==1)ok=0;
				if(ok){
					idx=i;
					break;
				}
			}
			if(idx==-1)break;
			char aa=start[idx];
			char bb=goal[idx];
			if(aa<bb){
				ans+=(bb-aa)*nextCost;
				start[idx]=goal[idx];
			}else{
				ans+=(aa-bb)*prevCost;
				start[idx]=goal[idx];
			}		
		}
		for(int i=0;i<N;i++)if(start[i]!=goal[i])return -1;
		return ans;		
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, string p2, string p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "\"" << p2 << "\"" << "," << "\"" << p3 << "\"";
	cout << "]" << endl;
	NextOrPrev *obj;
	int answer;
	obj = new NextOrPrev();
	clock_t startTime = clock();
	answer = obj->getMinimum(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	string p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 8;
	p2 = "ae";
	p3 = "bc";
	p4 = 21;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 5;
	p1 = 8;
	p2 = "ae";
	p3 = "cb";
	p4 = -1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 1;
	p2 = "srm";
	p3 = "srm";
	p4 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 1;
	p2 = "acb";
	p3 = "bdc";
	p4 = 30;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 10;
	p1 = 1;
	p2 = "zyxw";
	p3 = "vuts";
	p4 = 16;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 563;
	p1 = 440;
	p2 = "ptrbgcnlaizo";
	p3 = "rtscedkiahul";
	p4 = 10295;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 126;
	p1 = 311;
	p2 = "yovlkwpjgsna";
	p3 = "zpwnkytjisob";
	p4 = -1;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
