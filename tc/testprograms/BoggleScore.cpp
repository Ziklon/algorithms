#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#define sz size()
#define REP(i,n) for (int i = 0; i < (int)n; i++)
#define debug(v) cout<<#v<<" = "<<(v)<<endl;
#define adebug(x,n) cout <<#x<<endl; REP(i,n)cout<<x[i]<<char(i+1==n?10:32)
#define mdebug(x,m,n) cout <<#x<<endl; REP(i,m)REP(j,n)cout<<x[i][j]<<char(j+1==n?10:32)
using namespace std;
#define MOD 10000000000000LL
int dx[8]={0,0,1,-1,1,-1,1,-1};
int dy[8]={1,-1,0,0,1,-1,-1,1};
long long dp[51][4][4];

long long go(int idx, int x, int y, string& s, vector<string>& v){
	
	if(idx>=s.sz)return 1;
	long long& ref=dp[idx][x][y];
	if(ref!=-1)return ref;
	ref=0;	
	REP(i,8){
		int X=x+dx[i];
		int Y=y+dy[i];
		if(min(X,Y)>=0 && max(X,Y)<4 && s[idx]==v[X][Y])
			ref=(ref+go(idx+1,X,Y,s,v))%MOD;
	}
	return ref;	
}
class BoggleScore {
public:long long bestScore(vector <string> grid, vector <string> words) {	
		long long ans=0;
		REP(i,words.sz){
			memset(dp,-1,sizeof dp);
			long long can=0;
			REP(j,4)REP(k,4)if(words[i][0]==grid[j][k]){
				can+=go(1,j,k,words[i],grid);
			}
			can%=MOD;
			if(can)ans+=(words[i].sz*words[i].sz*can);			
			ans%=MOD;
			//cout<<i<<" "<<can<<endl;
		}		
		return ans;		
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	BoggleScore *obj;
	long long answer;
	obj = new BoggleScore();
	clock_t startTime = clock();
	answer = obj->bestScore(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	long long p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"XXEY","XXXX","XXXX","XXXX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"EYE"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 9ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"XEYE","XXXX","XXXX","XXXX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"EYE"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 36ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"TEXX","REXX","XXXX","XXXX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"TREE"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 32ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"XXXX","XSAX","XDNX","XXXX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"SANDS","SAND","SAD","AND"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 59ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"TREX","XXXX","XXXX","XXXX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"TREE"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
