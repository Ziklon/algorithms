#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>

#define REP(i,n) for (int i = 0; i < (int)n; i++)
#define adebug(x,n) cout <<#x<<endl; REP(i,n)cout<<x[i]<<char(i+1==n?10:32)
using namespace std;
typedef long long ll;
ll a[10],b[10],c[10],A[10],B[10],C[10];
int best;

void dfs(int x, int power, int chang){
	if(x==6){
		best=min(best,chang);
		return;
	}
	int cnt=0;
	REP(i,10){
		if(i!=a[x])cnt++;		
		if(chang+cnt<best)REP(j,10){
				if(j!=b[x])cnt++;
				if(chang+cnt<best)REP(k,10){
						if(k!=c[x])cnt++;						
						if(chang+cnt<best){
							A[x+1]=A[x]+(i*power);
							B[x+1]=B[x]+(j*power);
							C[x+1]=C[x]+(k*power);
							if((A[x+1]*B[x+1])%(power*10LL)==C[x+1])
								dfs(x+1,power*10,chang+cnt);
						}						
						if(k!=c[x])cnt--;
				}
				if(j!=b[x])cnt--;
			}
		if(i!=a[x])cnt--;
	}	
}

class AlienMultiplication {
public:
int getCorrections(int _a, int _b, int _c) {	
		best=10;
		ll aa=0;
		ll bb=0;
		REP(i,6){
			A[i]=B[i]=C[i]=0;
			a[i]=_a%10;
			b[i]=_b%10;
			c[i]=_c%10;
			aa=aa*10+a[i];
			bb=bb*10+b[i];
			
			_a/=10;
			_b/=10;
			_c/=10;
		}
		adebug(a,6);
		adebug(b,6);
		adebug(c,6);
		
		cout<<aa<<" "<<bb<<" "<<((aa*bb)%1000000)<<endl;
		dfs(0,1,0);				
		return best;		
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	AlienMultiplication *obj;
	int answer;
	obj = new AlienMultiplication();
	clock_t startTime = clock();
	answer = obj->getCorrections(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 23;
	p1 = 11;
	p2 = 2093;
	p3 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1538;
	p1 = 951234;
	p2 = 997892;
	p3 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 153;
	p1 = 7;
	p2 = 71;
	p3 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 421368;
	p1 = 512357;
	p2 = 862812;
	p3 = 4;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 0;
	p1 = 0;
	p2 = 987654;
	p3 = 5;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 999999;
	p1 = 999999;
	p2 = 1;
	p3 = 0;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
