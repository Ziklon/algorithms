#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define pb push_back
#define mp make_pair
#define mem(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define f(i,n) for(int (i)=0;i<(int)(n);(i)++)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long lcm(long long a,long long b){return a*(b/gcd(a,b));}

class XBallGame {
public:vector <string> newStatistics(vector <string> ps) {	
		map<string,vector<string> >M;
		for(int i=0;i<ps.sz;i++){
			int x=0;
			for(int k=0;k<ps[i].sz;k++)if(ps[i][k]=='-')x=k;
			string a=ps[i].substr(0,x);
			string b=ps[i].substr(x+1);
			M[a].pb(b);			
		}
		vector<string> dev;
		for(int i=0;i<ps.sz;i++){
			int x=0;
			for(int k=0;k<ps[i].sz;k++)if(ps[i][k]=='-')x=k;
			string a=ps[i].substr(0,x);
			string b=ps[i].substr(x+1);
			sort(all(M[a]));
			string res=a+"-"+b;
			for(int j=0;j<M[a].sz;j++)if(M[a][j]!=b)res+=","+M[a][j];
			dev.pb(res);
		}
		return dev;		
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	XBallGame *obj;
	vector <string> answer;
	obj = new XBallGame();
	clock_t startTime = clock();
	answer = obj->newStatistics(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"John-DH","Jack-SP","Sam-OF","John-SP","John-RP"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"John-DH,RP,SP","Jack-SP","Sam-OF","John-SP,DH,RP","John-RP,DH,SP"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"John-DH","Jack-SP","Sam-OF","John-SP","John-RP","John-RA","John-RZ","Jack-OF","Sam-SP"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"John-DH,RA,RP,RZ,SP","Jack-SP,OF","Sam-OF,SP","John-SP,DH,RA,RP,RZ","John-RP,DH,RA,RZ,SP","John-RA,DH,RP,RZ,SP","John-RZ,DH,RA,RP,SP","Jack-OF,SP","Sam-SP,OF"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"PFwL-GE","PFwL-EV","agXL-SR","PFwL-CS","PFwL-FE","PFwL-MS","agXL-VS","agXL-AL","PFwL-BI","PFwL-DK","PFwL-MW","PFwL-DS","agXL-XJ","agXL-PJ","agXL-CK","PFwL-KI","agXL-KP","agXL-EL","PFwL-EA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"PFwL-GE,BI,CS,DK,DS,EA,EV,FE,KI,MS,MW","PFwL-EV,BI,CS,DK,DS,EA,FE,GE,KI,MS,MW","agXL-SR,AL,CK,EL,KP,PJ,VS,XJ","PFwL-CS,BI,DK,DS,EA,EV,FE,GE,KI,MS,MW","PFwL-FE,BI,CS,DK,DS,EA,EV,GE,KI,MS,MW","PFwL-MS,BI,CS,DK,DS,EA,EV,FE,GE,KI,MW","agXL-VS,AL,CK,EL,KP,PJ,SR,XJ","agXL-AL,CK,EL,KP,PJ,SR,VS,XJ","PFwL-BI,CS,DK,DS,EA,EV,FE,GE,KI,MS,MW","PFwL-DK,BI,CS,DS,EA,EV,FE,GE,KI,MS,MW","PFwL-MW,BI,CS,DK,DS,EA,EV,FE,GE,KI,MS","PFwL-DS,BI,CS,DK,EA,EV,FE,GE,KI,MS,MW","agXL-XJ,AL,CK,EL,KP,PJ,SR,VS","agXL-PJ,AL,CK,EL,KP,SR,VS,XJ","agXL-CK,AL,EL,KP,PJ,SR,VS,XJ","PFwL-KI,BI,CS,DK,DS,EA,EV,FE,GE,MS,MW","agXL-KP,AL,CK,EL,PJ,SR,VS,XJ","agXL-EL,AL,CK,KP,PJ,SR,VS,XJ","PFwL-EA,BI,CS,DK,DS,EV,FE,GE,KI,MS,MW"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"a-AA","a-ZZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"a-AA,ZZ","a-ZZ,AA"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
