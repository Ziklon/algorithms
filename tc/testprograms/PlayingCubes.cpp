#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#define sz size()
#define REP(i,n) for (int i = 0; i < (int)n; i++)
#define debug(v) cout<<#v<<" = "<<(v)<<endl;
#define adebug(x,n) cout <<#x<<endl; REP(i,n)cout<<x[i]<<char(i+1==n?10:32)
#define mdebug(x,m,n) cout <<#x<<endl; REP(i,m)REP(j,n)cout<<x[i][j]<<char(j+1==n?10:32)
using namespace std;

class BipartiteGraph{	
	public:
		int sink,source,cnt;
		vector<vector<int> >flow,adj;		
		BipartiteGraph(){
			source=100;
			sink=101;
			cnt=120;
			flow.resize(cnt,vector<int>(cnt,0));
			adj.resize(cnt);
							
		}
		void addEdge(int u, int v){
			adj[u].push_back(v);
			adj[v].push_back(u);
			flow[u][v]=1;
		}
		void dfs(int u, vector<int>& prev){
			REP(i,adj[u].sz){
				int v=adj[u][i];
				if(prev[v]==-1 && flow[u][v]>0){
					prev[v]=u;
					dfs(v,prev);
				}
			}
		}
		
		int matching(){			
			int f=0;
			while(1){
				vector<int> prev(cnt,-1);	
				prev[source]=-2;
				dfs(source,prev);
				if(prev[sink]==-1)return f;
				f+=1;
				for(int v=sink;v!=source;v=prev[v]){
					int u=prev[v];
					flow[u][v]-=1;
					flow[v][u]+=1;
				}
			}			
			return -1;
		}				
	

};


class PlayingCubes {
public:vector <int> composeWords(vector <string> cubes, vector <string> words) {	
		vector <int> ans;
		int L,R=0;
		REP(i,cubes.sz)R+=cubes[i].sz;
		
		REP(i,words.sz){
			L=words[i].sz;
			BipartiteGraph bg;				
			REP(k,cubes.sz){
				int node=R+L+k+2;
				bg.addEdge(node,bg.sink);
			}
			
			REP(j,words[i].sz){
				bg.addEdge(bg.source,j);
				REP(k,cubes.sz){
					int node=R+L+k+2;
					REP(m,cubes[k].sz){
						if(cubes[k][m]==words[i][j]){
							bg.addEdge(j,(k*6)+m+L);
							bg.addEdge((k*6)+m+L,node);
						}
					}				
				}
			}
			if(bg.matching()==L)ans.push_back(i);
		}		
		return ans;		
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PlayingCubes *obj;
	vector <int> answer;
	obj = new PlayingCubes();
	clock_t startTime = clock();
	answer = obj->composeWords(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	vector <int> p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"ABCDEF","DEFGHI","OPQRST","ZZZZZZ","YYYYYY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"CAT","DOG","PIZZA"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"ABCDEF","DEFGHI","OPQRST","MNZLSA","QEIOGH","IARJGS"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"DOG","CAT","MOUSE","BIRD","CHICKEN","PIG","ANIMAL"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1,3,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"AAAAAA","AAAAAA","AAAAAA","AAAAAA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"AA","AAA","AAAA","AAAAA","AAAAAA"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"ABCDEF","DEFGHI","OPQRST","ZZZZZZ","ZZZZZZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"CAT","DOG","PIZZA"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
