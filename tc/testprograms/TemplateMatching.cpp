#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define pb push_back
#define mp make_pair
#define mem(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define f(i,n) for(int (i)=0;i<(int)(n);(i)++)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long lcm(long long a,long long b){return a*(b/gcd(a,b));}
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<string,int> psi;

class TemplateMatching {
public:string bestMatch(string text, string pre, string suf) {	
		string dev=string(51,'z');
		int ipre=0,isuf=0;
		for(int i=text.sz;i>=1;i--){
			for(int j=0;j+i<=text.sz;j++){
				string aux=text.substr(j,i);
				int A=0,B=0;
				string zk="",liz="";
				for(int i=pre.sz-1;i>=0;i--){
					zk=pre[i]+zk;
					if(aux.find(zk)==0)
						A=zk.sz;
				}				
				for(int i=aux.sz-1;i>=0;i--){
					liz=aux[i]+liz;
					if(suf.find(liz)==0)
						B=liz.sz;
				}
				if(ipre+isuf==A+B){
					if(A>ipre){
						ipre=A;
						isuf=B;
						dev=aux;
					}else if(A==ipre){
						if(dev>aux)
							dev=aux;
					}
				}
				if(A+B>ipre+isuf){
					ipre=A;
					isuf=B;
					dev=aux;
				}			
			}
		}
		return dev;		
	}
	//Powered by [Ziklon]
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, string p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	TemplateMatching *obj;
	string answer;
	obj = new TemplateMatching();
	clock_t startTime = clock();
	answer = obj->bestMatch(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = "something";
	p1 = "awesome";
	p2 = "ingenious";
	p3 = "something";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "havka";
	p1 = "eto";
	p2 = "papstvo";
	p3 = "a";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "abracadabra";
	p1 = "habrahabr";
	p2 = "bracket";
	p3 = "abrac";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "mississippi";
	p1 = "promise";
	p2 = "piccolo";
	p3 = "ippi";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "a a a a a a";
	p1 = "a a";
	p2 = "a";
	p3 = "a a";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "ab";
	p1 = "b";
	p2 = "a";
	p3 = "b";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
