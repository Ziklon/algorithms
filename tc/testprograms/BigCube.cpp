#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define fill(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long lcm(long long a,long long b){return a*(b/gcd(a,b));}

class BigCube {
public:string largestCube(vector <string> range) {	
		vector<long long>cub;
		for(long long i=0;i*i*i<=1e15;i++)cub.push_back(i*i*i);
		cout<<cub.sz<<endl;
		long long a,b,dev=-1;
		char aux;
		for(int i=0;i<range.sz;i++){
			istringstream is(range[i]);
			is>>a>>aux>>b;
			for(int j=0;j<cub.sz;j++){
				if(cub[j]>=a && cub[j]<=b)dev=max(dev,cub[j]);
			}
			
		}
		if(dev!=-1)return tos(dev);
		return "";
		
			
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	BigCube *obj;
	string answer;
	obj = new BigCube();
	clock_t startTime = clock();
	answer = obj->largestCube(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"1-1000000000001"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "1000000000000";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"10-999999999999990","11-999999999999991","12-999999999999992","13-999999999999993","14-999999999999994","15-999999999999995","16-999999999999996","17-999999999999993","18-999999999999994","19-999999999999999"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "999970000299999";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"0-3","10-20","30-60","80-120"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "1";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"999700030000-999999999999","999400119993-999700029998","999100269974-999400119991","998800479937-999100269972"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"0-0","2-2","3-3","4-4","5-5","6-6","7-7","9-9","10-10","12-12","14-14","16-16","18-18","20-20","22-22","24-24","26-26","28-28","30-30","32-32","34-34","36-36","38-38","40-40","42-42","44-44","46-46","48-48","50-50","52-52","54-54","56-56","58-58","60-60","62-62","65-65","67-67","69-69","71-71","73-73","75-75","77-77","79-79","81-81","83-83","85-85","87-87","89-89","99-99","999970000300000-999999999999999"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "0";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
