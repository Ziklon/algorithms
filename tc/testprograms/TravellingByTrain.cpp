#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;

#define all(v) (v).begin(),(v).end()

#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)

struct node{
	string val;
	int dif;

	node(string _val, int _dif){
		val=_val;
		dif=_dif;
	}
	bool operator < (node p)const{
		if(p.dif==dif)return p.val>val;
		return p.dif >dif;
	}	

};

int getTime(string s, int t){
	int h1,h2,m1,m2;
	sscanf(s.c_str(),"%d:%d-%d:%d",&h1,&m1,&h2,&m2);	
	int a=h1*60 + m1;
	int b=h2*60 + m2;
	if(t==0 && a==b)return 0;
	if(t==1 && a==b)return 24*60;
	if(a<b)return b-a;
	if(a>b)return ((24*60)-a)+b;
}

class TravellingByTrain { 
public:string earliestArrival(vector <string> timeTable) {	

		vector<vector<node> >v;
		string ans="";
		REP(i,0,timeTable.sz){
			stringstream ss(timeTable[i]);
			string cur;
			vector<node> vc;
			while(ss>>cur)
				vc.push_back(node(cur,getTime(cur,1)));				
			v.push_back(vc);
		}
		REP(i,0,v.sz)sort(all(v[i]));

		int tot=9*60;
		ans="09:00";

		REP(i,0,v.sz){
			int pt=0;
			int dif=1<<29;
			int day=0;
			REP(j,0,v[i].sz){
				string aux=ans+"-"+v[i][j].val.substr(0,5);				
				if((getTime(aux,0)+v[i][j].dif)<dif){
					dif=(getTime(aux,0)+v[i][j].dif);
					pt=j;
				}	
			}
			tot+=dif;
			ans=v[i][pt].val.substr(6);	
		}
		char buff[128];
		cout<<tot<<endl;
		tot=(tot+24*60)/(24*60);
		sprintf(buff,"%s, day %d",ans.c_str(),tot);					
		return buff;		
	}

};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TravellingByTrain *obj;
	string answer;
	obj = new TravellingByTrain();
	clock_t startTime = clock();
	answer = obj->earliestArrival(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"10:00-13:00 12:00-15:00","11:00-16:00 14:00-19:00"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "19:00, day 1";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"09:00-13:57","13:56-17:00"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "17:00, day 2";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"10:00-08:00"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "08:00, day 2";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"09:10-11:00 09:05-10:05","10:10-12:00 11:00-11:05","17:00-08:00","09:00-08:00"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "08:00, day 3";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"00:00-00:00"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	all_right = KawigiEdit_RunTest(4, p0, false, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
