#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

#define all(v) (v).begin(),(v).end()

#define sz size()

#define fill(x,i) memset(x,i,sizeof(x))

int dp[51][500000];

class PayBill {
public:vector <int> whoPaid(vector <int> meals, int totalMoney) {

		fill(dp,0);

		vector<int> ans;
		for(int i=1;i<=meals.sz;i++)
			for(int j=0;j<=totalMoney;j++){
				dp[i][j]=dp[i-1][j];
				if(j>=meals[i-1])
					dp[i][j]=max(dp[i][j],dp[i-1][j-meals[i-1]]+meals[i-1]);
			}

		for(int i=meals.sz-1;i>=0;i--){
			int R=totalMoney-meals[i];
			if(R>=0 && dp[i][R]==R){
				totalMoney-=meals[i];
				ans.push_back(i);
			}
		}

		sort(all(ans));

		return ans;

	}

};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	PayBill *obj;
	vector <int> answer;
	obj = new PayBill();
	clock_t startTime = clock();
	answer = obj->whoPaid(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	vector <int> p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1000,1200,1300};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2500;
	int t2[] = {1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {100,200,350};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 300;
	int t2[] = {0,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {150,200,350,400};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 900;
	int t2[] = {0,2,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {6584,6733,6018,5840,2723,4902,4260,5375,6745,1234,3000,8222,2472,4348,1716,9995,415,1234,2345,5679};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 70630;
	int t2[] = {0,1,3,4,5,6,8,9,11,13,14,15,16,17,19};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
