#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)
#define fill(x,i) memset(x,i,sizeof(x))

bool vis[55][55];
struct node{
	int x,y,n;
	node(){}	
	node(int _x, int _y, int _n){
		x=_x;
		y=_y;
		n=_n;
	}
};

int di[]={0,0,1,-1};
int dj[]={1,-1,0,0};
class Trainyard {
public:int reachableSquares(vector <string> layout, int fuel) {	
		queue<node>Q;
		fill(vis,0);
		REP(i,0,layout.sz)REP(j,0,layout[i].sz)if(layout[i][j]=='S'){
			Q.push(node(i,j,fuel));
			vis[i][j]=1;
		}

		while(!Q.empty()){
			node cur=Q.front();
			Q.pop();
			if(cur.n==0)continue;
			//if(layout[cur.x][cur.y]=='-'||layout[cur.x][cur.y]=='+')
			REP(i,0,2){
				int X=cur.x+di[i];
				int Y=cur.y+dj[i];
				if(min(X,Y)>=0 && X<layout.sz && Y<layout[0].sz ){
					if(layout[X][Y]=='+' || layout[X][Y]=='-'){
						Q.push(node(X,Y,cur.n-1));					
						vis[X][Y]=1;
					}
				}
			}
			//if(layout[cur.x][cur.y]=='|'||layout[cur.x][cur.y]=='+')
			REP(i,2,4){
				int X=cur.x+di[i];
				int Y=cur.y+dj[i];
				if(min(X,Y)>=0 && X<layout.sz && Y<layout[0].sz ){
					if(layout[X][Y]=='+' || layout[X][Y]=='|'){
						Q.push(node(X,Y,cur.n-1));
						vis[X][Y]=1;					
					}
				}
				}

		}
		int ans=0;
		REP(i,0,layout.sz)REP(j,0,layout[i].sz)ans+=vis[i][j];
		return ans;

	}

};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	Trainyard *obj;
	int answer;
	obj = new Trainyard();
	clock_t startTime = clock();
	answer = obj->reachableSquares(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {".-....","-S---.","......"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"..+-+.","..|.|.","S-+-+."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	p2 = 10;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"-....-","|....+","+-S++|","|.|..|","..+-++"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	p2 = 15;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {".|...","-+S+|",".|..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
