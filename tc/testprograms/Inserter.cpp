#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define fill(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define f(i,j,k) for(int i=j;j<k;i++)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long lcm(long long a,long long b){return a*(b/gcd(a,b));}
vector<string>parse(string s){
	vector<string>dev(3);
	vector<int>v;
	for(int i=0;i<s.sz;i++)
		if(s[i]=='#')
			v.push_back(i);
	
	dev[0]=s.substr(v[0]+1,v[1]-v[0]-1);
	dev[1]=s.substr(v[2]+1,v[3]-v[2]-1);
	dev[2]=s.substr(v[3]+1);
	return dev;
	
	
}
class Inserter {
public:string insert(vector <string> commands, string original) {	
		int index;
		for(int i=0;i<commands.sz;i++){
			vector<string>cur=parse(commands[i]);
			string insert=cur[0];
			string before=cur[1];
			index=toi(cur[2]);
			int len=before.sz,j,cnt=0;
			for(j=0;(j+len)<=original.sz && cnt<index;j++){
				string aux=original.substr(j,len);
				if(aux==before)
					cnt++;
			}
			j--;
			if(cnt==index)
				original=original.substr(0,j)+insert+original.substr(j);
		}
		return original;		
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	Inserter *obj;
	string answer;
	obj = new Inserter();
	clock_t startTime = clock();
	answer = obj->insert(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"#<B># #$# 2","#comes # #before this# 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "$100 before this $300";
	p2 = "$100 comes before this <B>$300";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"#,# # and# 1","#,# # and# 2","#,# # and# 3"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "lions and tigers and bears";
	p2 = "lions, and tigers, and bears";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"#import java.util.*; # #public class # 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "public class Inserter";
	p2 = "import java.util.*; public class Inserter";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"# # # # 1","# # # # 2","# # # # 3","# # # # 4","# # # # 5","# # # # 6"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "add lots of spaces";
	p2 = "add       lots of spaces";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"# # # # 6","# # # # 5","# # # # 4","# # # # 3","# # # # 2","# # # # 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "order matters quite a bit";
	p2 = "order  matters  quite  a  bit";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"#A# #..# 2","#A# #..# 5","#A# #..# 123456789"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "....";
	p2 = ".A...";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
