#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#define MAXN 1000
using namespace std;
bool G[MAXN][MAXN];
bool R[MAXN][MAXN];
int D[MAXN];
long long W[MAXN];

class WebsiteRank {
public:long long countVotes(vector <string> votes, string website) {	
		long long ans=0;
		map<string,int> M;
		int N=0;
		memset(G,0,sizeof G);
		memset(D,0,sizeof D);
		for(int i=0;i<MAXN;i++)W[i]=1;

		for(int i=0;i<votes.size();i++){
			stringstream ss(votes[i]);
			string name,tmp;
			ss>>name;
			if(M.count(name)==0)M[name]=++N;
			while(ss>>tmp){
				if(tmp==name)continue;
				if(M.count(tmp)==0)M[tmp]=++N;
				G[M[tmp]][M[name]]=1;
			}
		}
		if(M.count(website)==0)M[website]=++N;

		for(int i=1;i<=N;i++)G[i][i]=1;

		memcpy(R,G,sizeof R);

		for(int k=1;k<=N;k++)for(int i=1;i<=N;i++)for(int j=1;j<=N;j++)R[i][j]|=R[i][k]&&R[k][j];

		for(int i=1;i<=N;i++)for(int j=1;j<=N;j++)if(G[i][j] && R[j][i])G[i][j]=0;

		for(int i=1;i<=N;i++)for(int j=1;j<=N;j++)if(G[i][j])D[j]++;

		for(int k=0;k<N;k++){		
			for(int i=1;i<=N;i++)if(D[i]==0){
				D[i]=-1;
				for(int j=1;j<=N;j++)if(G[i][j]){
					W[j]+=W[i];
					D[j]--;
				}
			}		
		}
		ans=W[M[website]];		
		cout<<N<<endl;

		return ans;		
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	WebsiteRank *obj;
	long long answer;
	obj = new WebsiteRank();
	clock_t startTime = clock();
	answer = obj->countVotes(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	long long p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"C A B"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "C";
	p2 = 3ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"A B C D","B C D","C D"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "A";
	p2 = 8ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "A";
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"A B","B A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "A";
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"A B C D E F","B A","C B","D B"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "A";
	p2 = 3ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"MYSITE OTHERSITE ANOTHERSITE THIRDSITE"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "MYSITE";
	p2 = 4ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"{A B C D E F G H I J K L M N O P Q R S T U V W X Y","Z BA BB BC BD BE BF BG BH BI BJ BK BL BM BN BO BP","BQ BR BS BT BU BV BW BX BY BZ CA CB CC CD CE CF CG","CH CI CJ CK CL CM CN CO CP CQ CR CS CT CU CV CW CX","CY CZ DA DB DC DD DE DF DG DH DI DJ DK DL DM DN DO","DP DQ DR DS DT DU DV DW DX DY DZ EA EB EC ED EE EF","EG EH EI EJ EK EL EM EN EO EP EQ ER ES ET EU EV EW","EX EY EZ FA FB FC FD FE FF FG FH FI FJ FK FL FM FN","FO FP FQ FR FS FT FU FV FW FX FY FZ GA GB GC GD GE","GF GG GH GI GJ GK GL GM GN GO GP GQ GR GS GT GU GV","GW GX GY GZ HA HB HC HD HE HF HG HH HI HJ HK HL HM","HN HO HP HQ HR HS HT HU HV HW HX HY HZ IA IB IC ID","IE IF IG IH II IJ IK IL IM IN IO IP IQ IR IS IT IU","IV IW IX IY IZ JA JB JC JD JE JF JG JH JI JJ JK JL","JM JN JO JP JQ JR JS JT JU JV JW JX JY JZ KA KB KC","KD KE KF KG KH KI KJ KK KL KM KN KO KP KQ KR KS KT","KU KV KW KX KY KZ LA LB LC LD LE LF LG LH LI LJ LK","LL LM LN LO LP LQ LR LS LT LU LV LW LX LY LZ MA MB","MC MD ME MF MG MH MI MJ MK ML MM MN MO MP MQ MR"
			" MS","MT MU MV MW MX MY MZ NA NB NC ND NE NF NG NH NI NJ","NK NL NM NN NO NP NQ NR NS NT NU NV NW NX NY NZ OA","OB OC OD OE OF OG OH OI OJ OK OL OM ON OO OP OQ OR","OS OT OU OV OW OX OY OZ PA PB PC PD PE PF PG PH PI","PJ PK PL PM PN PO PP PQ PR PS PT PU PV PW PX PY PZ","QA QB QC QD QE QF QG QH QI QJ QK QL QM QN QO QP QQ","QR QS QT QU QV QW QX QY QZ RA RB RC RD RE RF RG RH","RI RJ RK RL RM RN RO RP RQ RR RS RT RU RV RW RX RY","RZ SA SB SC SD SE SF SG SH SI SJ SK SL SM SN SO SP","SQ SR SS ST SU SV SW SX SY SZ TA TB TC TD TE TF TG","TH TI TJ TK TL TM TN TO TP TQ TR TS TT TU TV TW TX","TY TZ UA UB UC UD UE UF UG UH UI UJ UK UL UM UN UO","UP UQ UR US UT UU UV UW UX UY UZ VA VB VC VD VE VF","VG VH VI VJ VK VL VM VN VO VP VQ VR VS VT VU VV VW","VX VY VZ WA WB WC WD WE WF WG WH WI WJ WK WL WM WN","WO WP WQ WR WS WT WU WV WW WX WY WZ XA XB XC XD XE","XF XG XH XI XJ XK XL XM XN XO XP XQ XR XS XT XU XV","XW XX XY XZ YA YB YC YD YE YF YG YH YI YJ YK YL YM","YN YO YP YQ YR YS YT YU YV YW YX YY YZ ZA"
			" ZB ZC ZD","ZE ZF ZG ZH ZI ZJ ZK ZL ZM ZN ZO ZP ZQ ZR ZS ZT ZU","ZV ZW ZX ZY ZZ BAA BAB BAC BAD BAE BAF BAG BAH BAI","BAJ BAK BAL BAM BAN BAO BAP BAQ BAR BAS BAT BAU","BAV BAW BAX BAY BAZ BBA BBB BBC BBD BBE BBF BBG","BBH BBI BBJ BBK BBL BBM BBN BBO BBP BBQ BBR BBS","BBT BBU BBV BBW BBX BBY BBZ BCA BCB BCC BCD BCE","BCF BCG BCH BCI BCJ BCK BCL BCM BCN BCO BCP BCQ","BCR BCS BCT BCU BCV BCW BCX BCY BCZ BDA BDB BDC","BDD BDE BDF BDG BDH BDI BDJ BDK BDL BDM BDN BDO","BDP BDQ BDR BDS BDT BDU BDV BDW BDX BDY BDZ BEA","BEB BEC BED BEE BEF BEG BEH BEI BEJ BEK BEL BEM","BEN BEO BEP BEQ BER BES BET BEU BEV BEW BEX BEY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "A";
	all_right = KawigiEdit_RunTest(6, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
