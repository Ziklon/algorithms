#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath> 
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <ctime> 
using namespace std; 
typedef long long ll;
struct Node{
	int x,y,L,S;
	Node(int _x, int _y, int _L, int _S){
		x=_x;y=_y;
		L=_L;S=_S;
	}
	bool operator < (const Node p)const{
		if(p.y!=y)return p.y>y;
		if(p.x!=x)return p.x>x;
		return 0;
	}
};

vector<Node> v;

class GetToTheTop {
public:
	int collectSweets(int K, vector <int> S, vector <int> x, 
						vector <int> y, vector <int> L) {
			
			v.clear();
			v.push_back(Node(0,0,0,0));
			
			for(int i=0;i<x.size();i++)v.push_back(Node(x[i],y[i],L[i],S[i]));			
			sort(v.begin(),v.end());			
			
			return 0;
										
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, vector <int> p3, vector <int> p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}";
	cout << "]" << endl;
	GetToTheTop *obj;
	int answer;
	obj = new GetToTheTop();
	clock_t startTime = clock();
	answer = obj->collectSweets(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	vector <int> p4;
	int p5;
	
	{
	// ----- test 0 -----
	p0 = 2;
	int t1[] = {1,2,3,4,3,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,1,1,4,5,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,3,4,1,2,3};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {2,1,1,2,1,1};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 13;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	int t1[] = {2,8,7,4,1,4,7,5,11,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,9,4,6,10,5,2,8,1,10};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,1,3,3,3,5,6,6,8,9};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {2,2,1,2,2,2,4,3,2,2};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 47;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	int t1[] = {1,3,5,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,6,2,8};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {2,4,1,2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {4,1,7,4};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 16;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 3;
	int t1[] = {80,20,15,13,10,7,8,9,1,4,3,15,14,19,22,12,6,15,10,30,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,8,11,17,20,14,10,16,8,14,19,6,6,6,6,15,15,15,14,20,20,20};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,2,3,2,1,4,6,7,8,8,8,9,10,11,12,9,10,11,12,9,10,11};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {2,2,2,2,2,2,3,2,3,2,1,2,2,1,1,1,1,1,1,1,1,1};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 129;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 10;
	int t1[] = {0,10,11,2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,26,29,22,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,83,88,22,5};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {11,1,23,15,8};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 5;
	int t1[] = {2,0,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,8,9};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {6,6,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {3,6,3};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 7;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 2;
	int t1[] = {2,9,9,1,9,9,8};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {10,8,6,6,8,7,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {6,7,5,4,5,2,5};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {1,1,1,1,1,1,1};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 47;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdi	t 2.1.8 (beta) modified by pivanof!
