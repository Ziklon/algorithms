#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath> 
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <ctime>
#define INF 1<<25 
using namespace std; 
typedef long long ll;

vector<vector<int> >flow,capacity,res_capacity;
vector<int> parent,visited;

vector<int> min_capacity;
int source, sink;
int max_flow=0;
//Bread First Search
bool BFS(int V){
	visited=vector<int>(V,0);
	min_capacity=vector<int>(V,INF);
	queue<int>Q;	
	Q.push(source);
	visited[source]=1;
	while(!Q.empty()){		
		int v=Q.front();Q.pop();
		if(v==sink)return 1;
		for(int u=0;u<V;u++){
			if(visited[u]==0 && res_capacity[v][u]>0){				
				min_capacity[u]=min(min_capacity[v],res_capacity[v][u]);
				parent[u]=v;
				visited[u]=1;
				Q.push(u);			
			}
		}	
	}
	return 0;
}
//Edmonds-Karp algorithm
void maxFlow(int V){
	flow=vector<vector<int> >(V,vector<int>(V));
	res_capacity=vector<vector<int> >(V,vector<int>(V));
	parent.resize(V);	
	for(int i=0;i<V;i++)for(int j=0;j<V;j++)res_capacity[i][j]=capacity[i][j];	
	max_flow=0;
	while(BFS(V)){		
		max_flow+=min_capacity[sink];
		int v=sink,u;
		while(v!=source){
			u=parent[v];			
			flow[u][v]+=min_capacity[sink];
			flow[v][u]-=min_capacity[sink];
			res_capacity[u][v]-=min_capacity[sink];
			res_capacity[v][u]+=min_capacity[sink];
			v=u;			
		}
	}	
}

class RookAttack {
public:
	int howMany(int r, int c, vector <string> cutouts) {
		capacity=vector<vector<int> >(r+c+2,vector<int>(r+c+2,0));
		for(int i=0;i<r;i++){
			for(int j=0;j<c;j++)capacity[i][r+j]=1;
			capacity[r+c][i]=1;
		}
		for(int i=0;i<c;i++)
			capacity[i+r][r+c+1]=1;
		for(int i=0;i<cutouts.size();i++){
			istringstream is(cutouts[i]);
			int a,b;
			char cc;
			while(is>>a>>b){
				capacity[a][b+r]=0;
				if(!(is>>cc))break;
			}
		}
		source=r+c;
		sink=r+c+1;
		maxFlow(r+c+2);
		return max_flow;	
				
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <string> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	RookAttack *obj;
	int answer;
	obj = new RookAttack();
	clock_t startTime = clock();
	answer = obj->howMany(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <string> p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 8;
	p1 = 8;
	p2.clear() /*{}*/;
	p3 = 8;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 2;
	string t2[] = {"0 0","0 1","1 1","1 0"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 3;
	string t2[] = {"0 0","1 0","1 1","2 0","2 1","2 2"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 3;
	p1 = 3;
	string t2[] = {"0 0","1 2","2 2"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 3;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 200;
	p1 = 200;
	p2.clear() /*{}*/;
	p3 = 200;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
