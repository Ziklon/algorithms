#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define pb push_back
#define mp make_pair
#define mem(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long _lcm(long long a,long long b){return a*(b/gcd(a,b));}

class TwoRotationCypher {
public:string encrypt(int firstSize, int firstRotate, int secondRotate, string message) {		
		int a=firstSize;
		int b=26-a;
		for(int i=0;i<message.sz;i++){
			if(message[i]!=' '){
				if(message[i]-'a'<firstSize){
					int k=(message[i]-'a'+a+firstRotate)%a;
					message[i]=('a'+k);		
				}else{
					int k=(message[i]-'a'-a+secondRotate)%b;
					message[i]=('a'+a+k);				
				}			
			}
		}
		return message;
				
	}
	//Powered by [Ziklon]
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, string p3, bool hasAnswer, string p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << "\"" << p3 << "\"";
	cout << "]" << endl;
	TwoRotationCypher *obj;
	string answer;
	obj = new TwoRotationCypher();
	clock_t startTime = clock();
	answer = obj->encrypt(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p4 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	string p3;
	string p4;
	
	{
	// ----- test 0 -----
	p0 = 13;
	p1 = 0;
	p2 = 0;
	p3 = "this string will not change at all";
	p4 = "this string will not change at all";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 13;
	p1 = 7;
	p2 = 0;
	p3 = "only the letters a to m in this string change";
	p4 = "onfy tbl flttlrs h to g cn tbcs strcna jbhnal";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 9;
	p1 = 0;
	p2 = 16;
	p3 = "j to z will change here";
	p4 = "z sn y vikk chamge heqe";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 17;
	p1 = 9;
	p2 = 5;
	p3 = "the quick brown fox jumped over the lazy dog";
	p4 = "yqn izalc kwgsf ogt bzehnm grnw yqn djvu mgp";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 3;
	p1 = 1;
	p2 = 2;
	p3 = "  watch   out for strange  spacing ";
	p4 = "  ybvaj   qwv hqt uvtbpig  urbakpi ";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
