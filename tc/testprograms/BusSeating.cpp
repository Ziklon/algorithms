#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)
#define fill(x,i) memset(x,i,sizeof(x))
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;
struct point{
	int x, y;
	point(){}
	point(int _x, int _y){
		x=_x;
		y=_y;
	}
};
class BusSeating {
public:double getArrangement(string leftRow, string rightRow) {	
		double ans=1e+30;
		REP(a,0,1<<10)
			if(__builtin_popcount(a)<=3)
				REP(b,0,1<<10)
					if(__builtin_popcount(a)+__builtin_popcount(b)==3){
						vector<point>v;
						REP(i,0,10)
							if((a&(1<<i)) && leftRow[i]=='-')
								v.push_back(point(i,0));
						REP(i,0,10)
							if((b&(1<<i)) && rightRow[i]=='-')
								v.push_back(point(i,2));
						if(v.sz==3){
							double aux=0;
							REP(i,0,2)
								aux+=hypot(v[i].x-v[i+1].x,v[i].y-v[i+1].y);
							aux+=hypot(v[0].x-v[2].x,v[0].y-v[2].y);
							ans=min(ans,aux);
						}
					}
		return ans;	
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	BusSeating *obj;
	double answer;
	obj = new BusSeating();
	clock_t startTime = clock();
	answer = obj->getArrangement(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	double p2;
	
	{
	// ----- test 0 -----
	p0 = "----------";
	p1 = "----------";
	p2 = 4.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "XXX-X-XX-X";
	p1 = "-XXXX---XX";
	p2 = 4.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "XXXXXXXXXX";
	p1 = "-XX-XX-X--";
	p2 = 6.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "XXX-X-XX-X";
	p1 = "XXX-X-XX-X";
	p2 = 6.82842712474619;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
