#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define fill(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define f(i,j,k) for(int i=j;j<k;i++)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long lcm(long long a,long long b){return a*(b/gcd(a,b));}

int di[4]={1,1,-1,-1};
int dj[4]={1,-1,-1,1};
bool check(int& X, int& Y){
	return (X>=0 && Y>=0 && X<8 && Y<8);	
}
bool vis[9][9];
vector<string> table;
bool cruz(int x, int y, char othe, int p, int q){
	int c=0;
	for(int k=p;k<q;k++){
		int X=di[k]+x;
		int Y=dj[k]+y;
		int a=X+di[k];
		int b=Y+dj[k];
		while(check(a,b) && table[a][b]==' ' && table[X][Y]==othe){
			X+=2*di[k];
			Y+=2*dj[k];
			a+=2*di[k];
			b+=2*dj[k];
			c++;
		}
	}
	return c;
}

class CheckersBoard {
public:int numMoves(vector <string> board) {	
		table=board;
		fill(vis,0);
		int dev=0;
		for(int i=0;i<8;i++)
			for(int j=0;j<8;j++){
				if(board[i][j]=='W'){
					dev+=cruz(i,j,'B',2,4);
					if(!cruz(i,j,'B',2,4)){
						for(int k=2;k<4;k++){
							int X=di[k]+i;
							int Y=dj[k]+j;
							if(check(X,Y)&& table[X][Y]==' ')
								dev++;
						} 
					}							
				}
				if(board[i][j]=='B'){
					dev+=cruz(i,j,'W',0,2);
					if(!cruz(i,j,'W',0,2)){
						for(int k=0;k<2;k++){
							int X=di[k]+i;
							int Y=dj[k]+j;
							if(check(X,Y)&& table[X][Y]==' ')
								dev++;
						} 
					}							
				}
			}
	
		return dev;		
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CheckersBoard *obj;
	int answer;
	obj = new CheckersBoard();
	clock_t startTime = clock();
	answer = obj->numMoves(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"B       ","        ","        ","        ","        ","        ","        "," W      "};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"B B     "," W      ","        ","        ","        ","        ","        ","        "};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"B B B B "," B B B B","B B B B ","        ","        "," W W W W","W W W W "," W W W W"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 14;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"B B B B "," W W W W","W W W W ","        ","        ","        ","        ","        "};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"    B B ","   B B W","    B W ","     W W","      W ","       W","        ","        "};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
