#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;
typedef vector<int> vi; 
typedef vector<string> vs; 
typedef pair<int, int> pii; 
typedef long long ll;
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)
#define INF 1<<29
#define fill(x,i) memset(x,i,sizeof(x))
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)

string toBin(int x, int n){
	string s;
	while(x>0){
		s=string(1,x%2+'0')+s;
		x/=2;
	}
	while(s.sz<n)
		s=string(1,'0')+s;
	return s;
}
int toInt(string s){
	int ans=0;
	REP(i,0,s.sz)
		ans=(ans*2)+(s[i]-'0');
	return ans;
}

class TheLockDivTwo {
public:string password(int n, int k) {	
		bool vis[1<<10];
		fill(vis,0);
		queue<int> Q;
		Q.push(0);vis[0]=1;
		vector<string> ans;
		ans.push_back(string(n,'0'));

		while(!Q.empty()){
			int cur=Q.front();Q.pop();			
			vector<string> v;
			string s=toBin(cur,n);
			vector<int> ones,zeros;
			REP(i,0,s.sz)if(s[i]=='0')zeros.push_back(i);
			REP(i,0,s.sz)if(s[i]=='1')ones.push_back(i);
			
			REP(mask,0,1<<ones.sz){
				string sub=s;				
				REP(i,0,ones.sz){
					if(mask&(1<<i))
						sub[ones[i]]='0';
					}
				v.push_back(sub);				
			}
			REP(mask,0,1<<zeros.sz){
				string sub=s;				
				REP(i,0,zeros.sz){
					if(mask&(1<<i))
						sub[zeros[i]]='1';
					}
				v.push_back(sub);				
			}
			sort(all(v));
			REP(i,0,v.sz){
				cur=toInt(v[i]);				
				if(!vis[cur]){
					Q.push(cur);
					vis[cur]=1;
					ans.push_back(v[i]);
					//cout<<v[i]<<endl;
					break;					
				}		
			}
		}
		return ans[k-1];			
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	TheLockDivTwo *obj;
	string answer;
	obj = new TheLockDivTwo();
	clock_t startTime = clock();
	answer = obj->password(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 4;
	p2 = "10";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 6;
	p2 = "0100";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	p1 = 1;
	p2 = "0000000000";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 7;
	p1 = 100;
	p2 = "1100001";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
