#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
using namespace std;


string allLower(string s){
	for(int i=0;i<s.size();i++)s[i]=tolower(s[i]);
	return s;
}
bool onlyVowel(string s){
	if(s[0]=='y')return 0;
	string vow="aeiou";
	for(int i=0;i<s.size();i++)if(vow.find(s[i])==-1 && s[i]!='y')return 0;
	return 1;
}

bool conso(string s){
	string vow="aeiouy";
	for(int i=0;i+1<s.size();i++)if(vow.find(s[i])!=-1)return 0;
	return 1;
}
bool valid(string s){
	int n=s.size();
	if(s[0]=='y' || s[n-1]=='y')return 0;
	
	
}
string get_end(string s){
	string vow="aeiou";
	s=allLower(s);
	int N=s.size();
	string ans;
	int i=N-1;
	
	if(s[i]=='y')return string(10,'-');
	
	if(vow.find(s[i])==-1){
		while(i>=0 && vow.find(s[i])!=-1 && s[i]!='y')i--;		
	}
	while(i>=0 && s[i]=='y')i--;
	if(i<0)return string(10,'-');	
	if(vow.find(s[i])==-1)return string(10,'-');
	
	return ans;	
}

bool func(string a, string b){
	string sa=get_end(a);
	string sb=get_end(b);
	//cout<<a<<" "<<b<<" "<<sa<<" "<<sb<<endl;
	return sa==sb;
}

class Poetry {
public:string rhymeScheme(vector <string> poem) {	
		
		int N=poem.size();
		
		//cout<<get_end("your")<<endl;
		
		string ans=string(N,' ');
		for(int i=0;i<N;i++){
			string tmp;
			stringstream ss(poem[i]);
			while(ss>>tmp);
			poem[i]=tmp;			
		}
		vector<int> used(55,-1);
		int cnt=0;
		for(int i=0;i<N;i++){
			if(poem[i]=="" || used[i]>-1)continue;
			used[i]=cnt;
			for(int j=i+1;j<N;j++){
				if(used[j]>-1)continue;
				if(func(poem[i],poem[j])){
					used[j]=cnt;
				}	
			}
			cnt++;
		}
		for(int i=0;i<N;i++){
			if(used[i]==-1)continue;
			if(used[i]<26)ans[i]='a'+used[i];
			else ans[i]='A'+used[i]-26;
		}
		return ans;		
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Poetry *obj;
	string answer;
	obj = new Poetry();
	clock_t startTime = clock();
	answer = obj->rhymeScheme(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"I hope this problem","is a whole lot better than","this stupid haiku"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "abc";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"     ","Measure your height","AND WEIGHT      ","said the doctor","","And make sure to take your pills","   to   cure   your    ills","Every","DAY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = " aab ccde";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"One bright day in the middle of the night","Two dead boys got up to fight","Back to back they faced each other","Drew their swords and shot each other","","A deaf policeman heard the noise","And came to arrest the two dead boys","And if you dont believe this lie is true","Ask the blind man he saw it too"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "aabb cdef";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"","","",""};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "    ";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"This poem has uppercase letters","In its rhyme scheme","Alpha","Blaster","Cat","Desert","Elephant","Frog","Gulch","Horse","Ireland","Jam","Krispy Kreme","Loofah","Moo","Narf","Old","Pink","Quash","Rainbow","Star","Tour","Uvula","Very","Will","Xmas","Young","Zed","deception","comic","grout","oval","cable","rob","steal","steel","weak"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "abcdefghibjkblmnopqrstcuvwxyzABCbDEFG";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {" ","     ","This poem","         "," "," ","","Has lots of blank lines"," ","      ","                                            ","         "," ","              ","                                                  ","  in      it           "};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "  a    b       c";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"too bad   your","     solution went   sour"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "aa";
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
