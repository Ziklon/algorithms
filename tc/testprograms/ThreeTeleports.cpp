#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)
#define fill(x,i) memset(x,i,sizeof(x))
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;
long long G[15][15];
long long dis[15];
struct point{
	int x, y;
	point(){}
	point(int _x, int _y){
		x=_x;
		y=_y;
	}
};
point points[15];

struct node{
	int x;
	node(){}
	node(int _x){
		x=_x;
	}
	bool operator < (const node p)const{
		return dis[x]<dis[p.x];
	}
};


class ThreeTeleports {
public:int shortestDistance(int xMe, int yMe, int xHome, int yHome, vector <string> teleports) {	
		points[0]=point(xMe,yMe);
		points[1]=point(xHome,yHome);
		REP(i,0,3){
			int x,y;
			istringstream is(teleports[i]);
			REP(j,0,2){
				is>>x>>y;
				points[i+2+j*3]=point(x,y);
				cout<<(i+2+j*3)<<endl;
			}
		}
		REP(i,0,8)
			REP(j,0,8){
				G[i][j]=abs(points[i].x-points[j].x)+abs(points[i].y-points[j].y);
			}
		G[2][5]=min(10LL,G[2][5]);
		G[5][2]=min(10LL,G[5][2]);
		G[3][6]=min(10LL,G[3][6]);
		G[6][3]=min(10LL,G[6][3]);
		G[4][7]=min(10LL,G[4][7]);
		G[7][4]=min(10LL,G[7][4]);
		REP(i,0,15)dis[i]=1LL<<50;
		priority_queue<node>Q;
		Q.push(node(0));
		dis[0]=0;
		while(!Q.empty()){
			node cur=Q.top();			
			Q.pop();
			REP(i,0,8){
				if(dis[i]>dis[cur.x] +G[cur.x][i]){
					dis[i]=dis[cur.x]+G[cur.x][i];
					Q.push(node(i));
				}
			}		
		}
		return dis[1];				
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, vector <string> p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p4[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ThreeTeleports *obj;
	int answer;
	obj = new ThreeTeleports();
	clock_t startTime = clock();
	answer = obj->shortestDistance(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	vector <string> p4;
	int p5;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 3;
	p2 = 4;
	p3 = 5;
	string t4[] = {"1000 1001 1000 1002","1000 1003 1000 1004","1000 1005 1000 1006"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 0;
	p1 = 0;
	p2 = 20;
	p3 = 20;
	string t4[] = {"1 1 18 20","1000 1003 1000 1004","1000 1005 1000 1006"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 14;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 0;
	p1 = 0;
	p2 = 20;
	p3 = 20;
	string t4[] = {"1000 1003 1000 1004","18 20 1 1","1000 1005 1000 1006"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 14;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 10;
	p2 = 10000;
	p3 = 20000;
	string t4[] = {"1000 1003 1000 1004","3 3 10004 20002","1000 1005 1000 1006"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 30;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 3;
	p1 = 7;
	p2 = 10000;
	p3 = 30000;
	string t4[] = {"3 10 5200 4900","12212 8699 9999 30011","12200 8701 5203 4845"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 117;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 0;
	p1 = 0;
	p2 = 1000000000;
	p3 = 1000000000;
	string t4[] = {"0 1 0 999999999","1 1000000000 999999999 0","1000000000 1 1000000000 999999999"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 36;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
