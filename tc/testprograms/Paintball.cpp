#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define fill(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long lcm(long long a,long long b){return a*(b/gcd(a,b));}

bool orden(pair<string,int> p, pair<string,int>q){
	if(p.second!=q.second)return p.second>q.second;
	return p.first<q.first;
}

class Paintball {
public:vector <string> getLeaderboard(vector <string> players, vector <string> messages) {	
		map<string,int>score;
		map<string,vector<string> >team;
		map<string,int>player;
		map<string,string>rel;
		string res;
		for(int i=0;i<players.sz;i++){
			istringstream is(players[i]);
			string jugador,equipo;
			is>>jugador>>equipo;
			rel[jugador]=equipo;
			score[equipo]=0;
			player[jugador]=0;
			team[equipo].push_back(jugador);
		}
		for(int i=0;i<messages.sz;i++){
			string a,mes,b;
			istringstream is(messages[i]);
			is>>a>>mes>>b;
			score[rel[b]]--;
			if(rel[a]!=rel[b]){
				score[rel[a]]++;
				player[a]++;							
				player[b]--;
			}else{
				player[a]--;
			}
			
		}
		vector<pair<string,int> >v(all(score));
		sort(all(v),orden);
		vector<string>dev;
		for(int i=0;i<v.sz;i++){
			res=v[i].first+" "+tos(v[i].second);
			dev.push_back(res);
			vector<string>jug=team[v[i].first];
			vector<pair<string,int> >vj; 
			for(int j=0;j<jug.sz;j++)
				vj.push_back(make_pair(jug[j],player[jug[j]]));
			sort(all(vj),orden);
			
			for(int j=0;j<vj.sz;j++)
				dev.push_back("  "+vj[j].first+" "+tos(vj[j].second));
			
		}
		return dev;		
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, vector <string> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Paintball *obj;
	vector <string> answer;
	obj = new Paintball();
	clock_t startTime = clock();
	answer = obj->getLeaderboard(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p2[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"A RED","B BLUE"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"A SPLATTERED B"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"RED 1","  A 1","BLUE -1","  B -1"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"LISA RED","BART RED","HOMER BLUE","MARGE BLUE","MAGGIE GREEN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"MAGGIE SPLATTERED HOMER","MAGGIE SPLATTERED MARGE"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"GREEN 2","  MAGGIE 2","RED 0","  BART 0","  LISA 0","BLUE -2","  HOMER -1","  MARGE -1"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"TODD STRIKEFORCE","BART OMEGA","DATA STRIKEFORCE","MILHOUSE OMEGA","NELSON DISCOVERYCHANNEL","MARTIN DISCOVERYCHANNEL"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"BART SPLATTERED MARTIN","TODD SPLATTERED MARTIN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"OMEGA 1","  BART 1","  MILHOUSE 0","STRIKEFORCE 1","  TODD 1","  DATA 0","DISCOVERYCHANNEL -2","  NELSON 0","  MARTIN -2"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"DR COHO","ST COHO","PE COHO"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"DR SPLATTERED ST","ST SPLATTERED PE"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"COHO -2","  PE 0","  DR -1","  ST -1"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"A B","AA AA","AAA AAA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"A SPLATTERED AAA","A SPLATTERED AAA","A SPLATTERED AAA","AA SPLATTERED AAA","AA SPLATTERED AAA"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"B 3","  A 3","AA 2","  AA 2","AAA -5","  AAA -5"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
