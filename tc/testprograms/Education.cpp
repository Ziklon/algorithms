#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
using namespace std;

#define SIZE(X) (X).size()
#define all(V) (V).begin(),(V).end()
string tos(int n) { stringstream ss; ss<<n; return ss.str();}
long long  toi(string s){ istringstream ss(s); long long n; ss>>n; return n;}

int mins(int lm, double sn,int na){
  int nt=100, rp=-1;
  int ot=0;
  int ant=0;
  do{
    ant=nt;
    nt--;
    ot=sn+nt;
  }while((ot/na)*1.0>=lm*1.0  && nt>=0);   
  sn=sn+ant;
  if((sn/na)*1.0>=lm)
     return nt+1;
  return rp;  
}

class Education {
public:
    int minimize(string desire, vector <int> tests) {
        int dev=0;
        double pe=0;
        for(int i=0;i<SIZE(tests);i++){
          pe+=tests[i];
        }
        switch(desire[0]){
          case 'A' :
               dev=mins(90,pe,tests.size()+1);
               break;
          case 'B' :
               dev=mins(80,pe,tests.size()+1);
               break;
          case 'C' :
               dev=mins(70,pe,tests.size()+1);
               break;
          case 'D' :
               dev=mins(60,pe,tests.size()+1);
               break;
        }        
        
        return dev;
    }
    //Powered by [Ziklon] 1.0!!	

};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	Education *obj;
	int answer;
	obj = new Education();
	clock_t startTime = clock();
	answer = obj->minimize(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "A";
	int t1[] = {0,70};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "D";
	int t1[] = {100,100,100,100,100,100};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "B";
	int t1[] = {80,80,80,73};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 87;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "B";
	int t1[] = {80,80,80,73,79};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 88;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "A";
	int t1[] = {80};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 100;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING// Powered by FileEdit
// Powered by CodeProcessor
