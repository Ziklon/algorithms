#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
#include <cstring>
using namespace std;

#define SIZE(X) (X).size()
#define all(V) (V).begin(),(V).end()
string tos(int n) { stringstream ss; ss<<n; return ss.str();}
long long  toi(string s){ istringstream ss(s); long long n; ss>>n; return n;}
class MostCommonLetters {
public:
    string listMostCommon(vector <string> text) {
        string dev="";
        int alf[26];
        memset(alf,0,sizeof(alf));
        for(int i=0;i<text.size();i++)
          for(int j=0;j<text[i].size();j++)
            if(text[i][j]!=' ')
                 alf[text[i][j]-'a']++;
        int my=0;
        for(int i=0;i<26;i++)
          if(alf[i]>my){
            dev=string(1,i+'a');
            my=alf[i];
          }
          else if(my==alf[i])
            dev+=string(1,i+'a');        
        return dev;
    }
    //Powered by [Ziklon] 1.0!!	

};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	MostCommonLetters *obj;
	string answer;
	obj = new MostCommonLetters();
	clock_t startTime = clock();
	answer = obj->listMostCommon(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"abc a"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "a";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"abc","ab"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "ab";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"qwerty","abc","qwe","a"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "aeqw";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"english is a west germanic language originating","in england and is the first language for most","people in the united kingdom the united","states canada australia new zealand ireland","and the anglophone caribbean it is used","extensively as a second language and as an","official language throughout the world","especially in commonwealth countries and in","many international organizations"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "a";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"amanda forsaken bloomer meditated gauging knolls","betas neurons integrative expender commonalities","latins antidotes crutched bandwidths begetting","prompting dog association athenians christian ires","pompousness percolating figured bagatelles bursted","ninth boyfriends longingly muddlers prudence puns","groove deliberators charter collectively yorks","daringly antithesis inaptness aerosol carolinas","payoffs chumps chirps gentler inexpressive morales"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "e";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING// Powered by FileEdit
// Powered by CodeProcessor
