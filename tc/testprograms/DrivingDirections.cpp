#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define pb push_back
#define mp make_pair
#define mem(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long _lcm(long long a,long long b){return a*(b/gcd(a,b));}

class DrivingDirections {
public:vector <string> reverse(vector <string> ds) {	
		vector<string> v1,v2;
		if(ds.sz<2)
		return ds;
		for(int i=0;i<ds.sz;i++){
		  int cnt=0;
		  for(int j=0;j<ds[i].sz;j++){
		    if(ds[i][j]==' ')
		      cnt++;
		    if(cnt==2){
		     v1.pb(ds[i].substr(0,j));
		     v2.pb(ds[i].substr(j,ds[i].sz-j));
		     break;
		    }
		  }
		}
		std::reverse(all(v2));
		for(int i=0;i<v1.sz;i++){
		  if(i==0)
		    ds[i]="Start"+v2[i];
		  else if(i+1==ds.sz)
		  				ds[i]=(v1[i]=="LEFT")?"RIGHT":"LEFT"+" on"+v2[i];
		  else ds[i]=v1[i]+v2[i];
		 }
		return ds;						
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	DrivingDirections *obj;
	vector <string> answer;
	obj = new DrivingDirections();
	clock_t startTime = clock();
	answer = obj->reverse(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"Start on Pirate Street","Turn LEFT on Viking Avenue","Turn RIGHT on Ninja Court"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Start on Ninja Court","Turn LEFT on Viking Avenue","Turn RIGHT on Pirate Street"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"Start on planet Earth"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Start on planet Earth"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"Start on Hebron Ave","Turn RIGHT on CT-2","Turn LEFT on I-84","Turn LEFT on I-81","Turn RIGHT on I-80","Turn LEFT on I-680","Turn RIGHT on Mission Blvd","Turn LEFT on I-880","Turn RIGHT on Montague Expressway","Turn RIGHT on Mission College Blvd"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Start on Mission College Blvd","Turn LEFT on Montague Expressway","Turn LEFT on I-880","Turn RIGHT on Mission Blvd","Turn LEFT on I-680","Turn RIGHT on I-80","Turn LEFT on I-81","Turn RIGHT on I-84","Turn RIGHT on CT-2","Turn LEFT on Hebron Ave"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"Start on  ","Turn LEFT on  0123456789 - ","Turn RIGHT on  0123456789 - ","Turn LEFT on                                      ","Turn RIGHT on                                     ","Turn LEFT on -a0b1c2d3e4f5g6h7i8j9k ","Turn RIGHT on -A0B1C2D3E4F5G6H7I8J9K ","Turn LEFT on -","Turn RIGHT on -"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Start on -","Turn LEFT on -","Turn RIGHT on -A0B1C2D3E4F5G6H7I8J9K ","Turn LEFT on -a0b1c2d3e4f5g6h7i8j9k ","Turn RIGHT on                                     ","Turn LEFT on                                      ","Turn RIGHT on  0123456789 - ","Turn LEFT on  0123456789 - ","Turn RIGHT on  "};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"Start on Duke University Rd","Turn RIGHT on Swift Ave","Turn LEFT on NC-147","Turn LEFT on I-85","Turn RIGHT on I-40","Turn RIGHT on US-52","Turn LEFT on I-74","Turn RIGHT on I-77","Turn LEFT on I-64","Turn RIGHT on Martin Luther King Memorial Bridge","Turn RIGHT on N 3rd St","Turn LEFT on Cole St","Turn LEFT on N Broadway","Turn RIGHT on Convention Plz"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Start on Convention Plz","Turn LEFT on N Broadway","Turn RIGHT on Cole St","Turn RIGHT on N 3rd St","Turn LEFT on Martin Luther King Memorial Bridge","Turn LEFT on I-64","Turn RIGHT on I-77","Turn LEFT on I-74","Turn RIGHT on US-52","Turn LEFT on I-40","Turn LEFT on I-85","Turn RIGHT on NC-147","Turn RIGHT on Swift Ave","Turn LEFT on Duke University Rd"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
