#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#define sz size()
#define INF 1<<30
#define REP(i,n) for (int i = 0; i < (int)n; i++)
#define debug(v) cout<<#v<<" = "<<(v)<<endl;
#define adebug(x,n) cout <<#x<<endl; REP(i,n)cout<<x[i]<<char(i+1==n?10:32)
#define mdebug(x,m,n) cout <<#x<<endl; REP(i,m)REP(j,n)cout<<x[i][j]<<char(j+1==n?10:32)
using namespace std;

int dist[50][50][2];

struct node{
	int x, y, w, c;
	node(){}
	node(int _x, int _y, int _w, int _c){
		x=_x;y=_y;
		w=_w;
		c=_c;
	}
	bool operator < ( node p)const{
		return c>p.c;
	} 
};

int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};
int cx[]={2,2,1,1};
class LumberjackHack {
public:int timeToShore(vector <string> riverMap) {	
		
		REP(i,50)REP(j,50)REP(k,2)dist[i][j][k]=INF;
		
		priority_queue<node> Q;
		int N=riverMap.sz;
		int M=riverMap[0].sz;		
		REP(i,N)REP(j,M)if(riverMap[i][j]=='+'){
			Q.push(node(i,j,0,0));
			dist[i][j][0]=0;
		}
		while(!Q.empty()){
			node cur=Q.top();Q.pop();			
			if(cur.y==0 || cur.y==M-1)return cur.c;
			REP(i,4){
				int X=cur.x+dx[i];
				int Y=cur.y+dy[i];
				
				if(min(X,Y)>=0 && X<N && Y<M){
					if(cur.w==0 && riverMap[X][Y]=='.' && dist[X][Y][1]>(cur.c+3)){
						dist[X][Y][1]=cur.c+3;
						Q.push(node(X,Y,1,cur.c+3));
					}
					if(riverMap[X][Y]=='|' && dist[X][Y][cur.w]>(cur.c+cx[i])){
						dist[X][Y][cur.w]=cur.c+cx[i];
						Q.push(node(X,Y,cur.w,cur.c+cx[i]));
					}
				}
			}			
		}
		
		return -1;		
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	LumberjackHack *obj;
	int answer;
	obj = new LumberjackHack();
	clock_t startTime = clock();
	answer = obj->timeToShore(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {".+.","||."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"..+","||."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"....|||","....|..","...||..","||.+...","...|...","...||||"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"||.|....","........",".|.+|..|","...|....","|..|.|.|"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {".........|.|.|.|.|..||...||.|..|.||...|.|.|||...||",".||.||...||..|||.....|.||||...|.|.|.|.|..|...|.|||","||.|.|..||.||....|.....|.||.|||||.|.|.||.|||||.|..","|.....|.|.||||.||..|.|..|..|.|||||.....||.|.||....","..|..||...||.|.......|||+||.||||....||||.....|..||","...||..||||.|......||..|.|||||.|.|||||.||..|||...|","|||...|..|..|.|||.||.|..|...||.|||..|..||.|.||....","|..|||||||||.||.....|..|.|.|||||...||...|.|.|||||.",".|..||...|||............|.|..|||.||.|||.||..||.|||",".|.|||...||..|..|...||.||..|..|||||.|.|...||..||.|","||||.|||.|..||||..|..||...|..||.|.||||...|...|.|..",".||..||...|.....|||.|||||..||......|.||.||.|..||..","|.|||....|||||.|..|..|.|||..|.||.||.|.|.|.|..||...",".||.||||||...||||||..||....|..||.|||..||...|.|||||",".||||.|....|...|.||..||..|||.|||||....|...||.|.||.",".|...|..||....||...|.||||.....||||.||.|||||||..|||",".||||...|...|..||...|...|...|.|..|.|.|..|..|||.||.",".|.|||..||||||||........|||||||||.|.|........|||||",".....|...||.||...|||...||||..|||...||....||..|"
			"|.||","||...||..||.||...||...||||..|.|..|...|||..||..|||.","|..||||.||..|...|....||||||...|||.|.|||||..|||...|",".....|||..||.|||.....||..||||...|||||.||.|.||..|||","|..|.||..|..||..||..|...|..|.||..||||..|...||..|..","||.|..|.|||||...|...|.|..|||||...|.......|.||.||||",".|.....|.|||||.....|||...|..|||||...|.||..||.|||.|",".|...||....|||...|||.||.|.|......|........|.||||||","..|.|.|.|||||..|||..|.........|...|.|.|...||.....|",".|.|.|.|..|.|||||||||||.|.|||....|||||...|.||||.|.","|.|||....|.||||..||......|..|||||.....||.|..||..|.","||.||.|||.|......|..|.|...|..||.|||..||.....|.|..|",".||||..|.|.||||.|||.||.||.....|....|....||...|..||",".....|||...||.||.||....|.||..||....|....|||||.|..|","|.|.|||||...|.||..|..|..|.|..|.|........||..|.|.||","....|..|.|..|.||||||....||||.|.||||||.|.|.|.......","||||....|..|...||..||||||||...|.|||||.|.|||.|...||","|...|.|..|..|..|....|..||..|||....||..||..|..|..|.","|||||....|.||.|..|.||..|||..|.|.|..||.|...|.|..||.","..|.|||.|.||..|...|||.|..|||..||...||..."
			"||||.....|","..||||.|.|.....|||..||||..|.||||..|..|||.....||.||","|..|||||....|........|.||||.||..||||.|....|||||||.",".|...||.|.||..|.|....|.||..|.|....|.|.||.||.||.|..",".|..|..|.||||.||||....|||.....|.|...|.|...|...||..","|..|||..|.||.|||..||.....|.|..|.|.|...|.....|.....","||..||.|...|.||...|..|..||.|||.||.|.||...|....|||.",".|....|.|||.|..|||..|.....|.||.||...|...||.......|",".||..|||.|.|....|||...|..|.||.||.|.|...|||||.|.|.|","|.|.||.||.|.|.||.|||.||....||.|||||.||.|.|||......","|...|||...|.||||....|.||.||.|.........|..||.|..||.",".|.....|.|.|....||.||...|||.|..||...||.|||.||.|.|.","||.||.|||.|||..||......|......||..||||.|..||.||||."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 63;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {".+."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"..+.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
