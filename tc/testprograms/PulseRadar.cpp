#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#define REP(i,n) for (int i = 0; i < (int)n; i++)
using namespace std;

#define EPS 1e-9
bool vis2[55],vis3[55];
int N,cntAns;
vector<pair<int,pair<int,pair<int,int> > > > v;
int speed[55];
vector<int> ans;
void backTrack(int pos){
	if(pos==N){
		cntAns++;
		ans.clear();
		ans.assign(N,0);
		REP(i,N)ans[i]=speed[i];
	}
	REP(i,v.size())if(v[i].first==pos){
		int xx=v[i].second.first;
		int yy=v[i].second.second.first;
		if(vis2[xx]==0 && vis3[yy]==0){
			vis2[xx]=1;
			vis3[yy]=1;
			speed[pos]=v[i].second.second.second;			
			backTrack(pos+1);
			vis2[xx]=0;
			vis3[yy]=0;
		}				
	}
	
}


class PulseRadar {
public:vector <int> deduceSpeeds(vector <int> x1, vector <int> y1, vector <int> x2, vector <int> y2, vector <int> x3, vector <int> y3) {	
		
		N=x1.size();
		v.clear();	
		cntAns=0;			
		REP(i,N)REP(j,N)REP(k,N){
			double d1=hypot(x1[i]-x2[j],y1[i]-y2[j]);			
			double d3=hypot(x1[i]-x3[k],y1[i]-y3[k]);			
			double d2=hypot(x2[j]-x3[k],y2[j]-y3[k]);			
			if(abs(d3-(d1*2))<=EPS && abs(d1-d2)<=EPS){
				v.push_back(make_pair(i,make_pair(j,make_pair(k,round(d1)))));
				//ans.push_back(round(d1));
			}			
		}
		backTrack(0);
		
		cout<<cntAns<<endl;
		if(cntAns!=1)return vector<int>();
		return ans;		
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, vector <int> p4, vector <int> p5, bool hasAnswer, vector <int> p6) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p5.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p5[i];
	}
	cout << "}";
	cout << "]" << endl;
	PulseRadar *obj;
	vector <int> answer;
	obj = new PulseRadar();
	clock_t startTime = clock();
	answer = obj->deduceSpeeds(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p6.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p6[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p6.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p6[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	vector <int> p4;
	vector <int> p5;
	vector <int> p6;
	
	{
	// ----- test 0 -----
	int t0[] = {-8,-7,9,-5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,-1,-2,-6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {-2,-3,8,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {-3,1,4,-2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {4,1,7,7};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {-8,3,10,2};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	int t6[] = {8,4,6,7};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {-7,-2,2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {8,-2,-2,-6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {-5,-1,3,-1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {9,1,-4,-8};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {-3,1,5,-2};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {10,5,-6,-10};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {-4,-4,-4,-4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9,3,-1,-7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {-1,-1,-1,-1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {6,-2,4,-4};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {2,2,2,2};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {3,-7,9,-1};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	p6.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {5,-4,2,-1,8,-4,-8,3,-3,-4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9,9,-2,-8,3,-8,-4,2,-4,-2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {-2,2,1,2,1,-1,-3,1,-4,-1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {-1,-5,6,-2,2,2,0,-1,-2,-5};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {8,5,-1,-3,6,-5,2,0,-6,-8};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {4,-2,2,3,-5,2,-8,0,-5,2};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	int t6[] = {5,9,5,4,8,8,4,4,3,4};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {-300,466};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-600,866};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {466,100};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {866,-450};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	int t4[] = {500,466};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {-300,866};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	int t6[] = {427,0};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
