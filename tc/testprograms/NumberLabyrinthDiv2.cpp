#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define sz size()
#define REP(i,a,b) for(int i=int(a);i<=int(b);i++)
#define fill(x,i) memset(x,i,sizeof(x))
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;
#define oo 1<<30
int dis[51][51][51];
int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};
struct node{
	int x,y,k;
	node(){}
	node(int _x, int _y, int _k){
		x=_x;
		y=_y;
		k=_k;
	}
   bool operator < (node p)const{
      return dis[x][y][k]>dis[p.x][p.y][p.k];
   }
};


bool RELAX(node p, int x,int y, int k){
	if(dis[x][y][k]>(dis[p.x][p.y][p.k]+1)){
		dis[x][y][k]=dis[p.x][p.y][p.k]+1;
		return 1;
	}
	return 0;
}
class NumberLabyrinthDiv2 {
public:int getMinimumNumberOfMoves(vector <string> board, int r1, int c1, int r2, int c2, int K) {	
		
		int R=board.sz;
		int C=board[0].sz;
		for(int i=0;i<=R;i++)
			for(int j=0;j<=C;j++)
				for(int k=0;k<=K;k++)
					dis[i][j][k]=oo;
		
		
		priority_queue<node>Q;
		for(int i=0;i<=K;i++)dis[r1][c1][i]=0;
		
		Q.push(node(r1,c1,K));

		while(!Q.empty()){
			node cur=Q.top();
			Q.pop();
			if(cur.x==r2&& cur.y==c2)return dis[cur.x][cur.y][cur.k];
			for(int j=0;j<4;j++){
				if(board[cur.x][cur.y]!='.'){
					int n=(board[cur.x][cur.y]-'0');
					int x=(n*dx[j]) +cur.x;
					int y=(n*dy[j]) +cur.y;
					if(0<=x &&x<R && 0<=y &&y<C)
						if(RELAX(cur,x,y,cur.k))Q.push(node(x,y,cur.k));
				}else{
					if(cur.k==0)continue;
					for(int n=1;n<=9;n++){
						int x=(n*dx[j]) +cur.x;
						int y=(n*dy[j]) +cur.y;
						if(0<=x&&x<R  && 0<=y&&y<C)
							if(RELAX(cur,x,y,cur.k-1))
								Q.push(node(x,y,cur.k-1));
					}					
				}				
			}
					
		}
		return -1;		
				
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, int p3, int p4, int p5, bool hasAnswer, int p6) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5;
	cout << "]" << endl;
	NumberLabyrinthDiv2 *obj;
	int answer;
	obj = new NumberLabyrinthDiv2();
	clock_t startTime = clock();
	answer = obj->getMinimumNumberOfMoves(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p6 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p6;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;
	
	{
	// ----- test 0 -----
	string t0[] = {"...2","....","3..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 2;
	p4 = 3;
	p5 = 0;
	p6 = -1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"...2","....","3..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 2;
	p4 = 3;
	p5 = 1;
	p6 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"...3","....","2..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 2;
	p4 = 3;
	p5 = 3;
	p6 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"55255",".0.0.","..9..","..3..","3.9.3","44.44"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 2;
	p3 = 4;
	p4 = 2;
	p5 = 10;
	p6 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"920909949","900020000","009019039","190299149","999990319","940229120","000409399","999119320","009939999"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	p2 = 3;
	p3 = 1;
	p4 = 1;
	p5 = 50;
	p6 = 10;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
