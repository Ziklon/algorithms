#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath> 
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <ctime> 
#define MAX 500001
using namespace std; 
typedef long long ll;
bool vis[MAX];
int dis[MAX];
int F[MAX+2];
class BunnyConverter {
public:
	int getMinimum(int n, int z, int start, int goal) {

		for(int i=0;i<MAX;i++){
			dis[i]=0;
			vis[i]=0;
		}
		queue<int> Q;
		Q.push(start);
		vis[start]=1;
		int a=(((1LL*z*z)%n)*1LL*z)%n;
		for(int i=1;i<=n;i++)F[i]=(1LL*i*i)%n;
		map<int,vector<int> >M;		
		for(int i=1;i<=n;i++)M[F[i]].push_back(i);		
		vector<int> vv=M[0];
		for(int i=0;i<vv.size();i++)cout<<vv[i]<<", ";		
		cout<<endl;
		while(!Q.empty()){
			int u=Q.front();Q.pop();
			if(u==goal)return dis[u];			
			int tmp=(a+u)%n;
			int val=(n-tmp)%n;			
			vector<int> v=M[val];
			for(int i=0;i<v.size();i++){
				if(vis[v[i]]==0){
					Q.push(v[i]);
					dis[v[i]]=dis[u]+1;
				}
			}	
		}
		return -1;
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	BunnyConverter *obj;
	int answer;
	obj = new BunnyConverter();
	clock_t startTime = clock();
	answer = obj->getMinimum(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 1;
	p2 = 5;
	p3 = 3;
	p4 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 5;
	p1 = 1;
	p2 = 5;
	p3 = 1;
	p4 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 6;
	p1 = 2;
	p2 = 3;
	p3 = 4;
	p4 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 7;
	p1 = 7;
	p2 = 7;
	p3 = 7;
	p4 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 499979;
	p1 = 499979;
	p2 = 499976;
	p3 = 3;
	p4 = 249988;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 2;
	p1 = 1;
	p2 = 1;
	p3 = 2;
	p4 = 1;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
