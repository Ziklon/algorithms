#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath> 
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <ctime> 
using namespace std; 
typedef long long ll;
#define INF 1<<30
int dist[20][20];
int king[20];
int queen[20];
int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};
int bfs(vector<string>& v, int sx, int sy, int ex, int ey){
	bool seen[50][50];	
	memset(seen,0,sizeof seen);
	queue<pair<int,pair<int,int> > >Q;
	seen[sx][sy]=1;
	while(!Q.empty()){
		int x=Q.front().second.first;
		int y=Q.front().second.second;
		int c=Q.front().first;
		Q.pop();
		if(x==ex && y==ey)return c;		
		for(int i=0;i<4;i++){
			int X=x+dx[i];
			int Y=y+dy[i];
			if(min(X,Y)>=0 && seen[X][Y]==0 && v[X][Y]!='#'){
				Q.push(make_pair(c+1,make_pair(X,Y)));
				seen[X][Y]=1;
			}
		}
	}
	return 1<<30;	
}

int dp[1<<16][16];


class Gifts {
public:
	int maxGifts(vector <string> city, int T) {
		vector<pair<int,int> >gifs;
		for(int i=0;i<city.size();i++)for(int j=0;j<city[i].size();j++){
			if(city[i][j]=='G')gifs.push_back(make_pair(i,j));
		}
		for(int i=0;i<gifs.size();i++)
			for(int j=i+1;j<gifs.size();j++)
				dist[i][j]=dist[j][i]=bfs(city,gifs[i].first,gifs[i].second,
					gifs[j].first,gifs[j].second);
		
		for(int i=0;i<city.size();i++)
			for(int j=0;j<city[i].size();j++){
				if(city[i][j]=='K'){
					for(int k=0;k<gifs.size();k++)
						king[k]=bfs(city,i,j,gifs[k].first,gifs[k].second);
				}
				if(city[i][j]=='Q'){
					for(int k=0;k<gifs.size();k++)
						queen[k]=bfs(city,i,j,gifs[k].first,gifs[k].second);
				}			
			}
		int ans=0;
		int G=gifs.size();
		for(int i=0;i<(1<<G);i++)for(int j=0;j<G;j++)dp[i][j]=INF;
		
		for(int i=0;i<G;i++)dp[1<<i][i]=king[i];
		
		for(int i=0;i<(1<<G);i++){
			int cnt=__builtin_popcount(i)+1;
			for(int j=0;j<G;j++)if(dp[i][j]<INF) 
				for(int k=0;k<G;k++)
					if(dist[j][k]<INF)
						if((i&(1<<j))==0)
							dp[i|(1<<k)][k]=min(dp[i|(1<<k)][k], dp[i][j]+dist[i][j]*cnt);
							 
		
		}				
		
		for(int i=0;i<(1<<G);i++){
			int tmp=__builtin_popcount(i)+1;
			for(int j=0;j<G;j++)if(dp[i][j]<INF && queen[j]<INF && (dp[i][j]+(queen[j]*tmp))<=T)
				ans=max(ans,tmp-1);
		
		}									

		return ans;
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	Gifts *obj;
	int answer;
	obj = new Gifts();
	clock_t startTime = clock();
	answer = obj->maxGifts(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"#######","#K.G.Q#","#######"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"#######","#K.G.Q#","#######"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"#######","#K.Q.G#","#######"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"#######","#K.Q.G#","#######"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	p2 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"#######","#K.QGG#","#######"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 9;
	p2 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"#....G#","###G###","#K...Q#","###.###","#G..GG#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 50;
	p2 = 4;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
