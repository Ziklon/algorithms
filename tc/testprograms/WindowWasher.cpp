#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#define sz size()
#define REP(i,n) for (int i = 0; i < (int)n; i++)
#define debug(v) cout<<#v<<" = "<<(v)<<endl;
#define adebug(x,n) cout <<#x<<endl; REP(i,n)cout<<x[i]<<char(i+1==n?10:32)
#define mdebug(x,m,n) cout <<#x<<endl; REP(i,m)REP(j,n)cout<<x[i][j]<<char(j+1==n?10:32)
using namespace std;
#define INF 1LL<<30
typedef long long ll;
ll dp[1002][52];

ll go(int col, int idx,int& H, vector<int>& v){
	
	if(idx>=v.sz && col>0)return INF;
	if(idx>=v.sz && col==0)return 0;
	ll& ref=dp[col][idx];
	if(ref!=-1)return ref;
	ref=go(col,idx+1,H,v);
	REP(i,col){
		ll vec=i+1;
		ref=min(ref,max(vec*H*v[idx],go(col-vec,idx+1,H,v)));	
	}	
	return ref;	
}

class WindowWasher {
public:int fastest(int width, int height, vector <int> washTimes) {	
		int ans;
		//sort(washTimes.rbegin(),washTimes.rend());		
		memset(dp,-1,sizeof dp);
		ans=go(width,0,height,washTimes);
		return (int)ans;		
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	WindowWasher *obj;
	int answer;
	obj = new WindowWasher();
	clock_t startTime = clock();
	answer = obj->fastest(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <int> p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 10;
	p1 = 10;
	int t2[] = {60};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 6000;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10;
	p1 = 10;
	int t2[] = {60,60};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 3000;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	p1 = 10;
	int t2[] = {60,30};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2100;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1000;
	p1 = 1000;
	int t2[] = {1000};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1000000000;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 421;
	p1 = 936;
	int t2[] = {111,56,931,22,445,90,14,222};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2450448;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 25;
	p1 = 25;
	int t2[] = {1,625};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 625;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 12;
	p1 = 754;
	int t2[] = {728,734,147,464,6,703,254};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 54288;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
