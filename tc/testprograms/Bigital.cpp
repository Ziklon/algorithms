#include <cstdio>
#include <iostream>
using namespace std;

int getBits(int n){
	int b=0;
	while(n){
		b+=__builtin_popcount(n%10);
		n/=10;
	}
	return b;	
}
class Bigital {
public:double energy(string tStart, string tEnd) {	
		int a,b,c,x,y,z;
		sscanf(tStart.c_str(),"%d:%d:%d",&a,&b,&c);
		sscanf(tEnd.c_str(),"%d:%d:%d",&x,&y,&z);
		double dev=0;
		bool ok=1;
		for(;ok;){
			for(;b<=59&&ok;b++){
				for(;c<=59;c++){
					if(a==x && b==y && c==z){
						ok=0;
						dev+=getBits(a)+getBits(b)+getBits(c);
						break;
					}else
						dev+=getBits(a)+getBits(b)+getBits(c);
				}
				c=0;
			}
			b=0;
			if(a==12)a=0;
			a++;
		}
		return dev/3600000.0;
				
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	Bigital *obj;
	double answer;
	obj = new Bigital();
	clock_t startTime = clock();
	answer = obj->energy(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	double p2;
	
	{
	// ----- test 0 -----
	p0 = "12:00:00";
	p1 = "12:00:00";
	p2 = 5.555555555555555E-7;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "12:59:59";
	p1 = "01:00:00";
	p2 = 3.0555555555555556E-6;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "12:01:00";
	p1 = "12:00:00";
	p2 = 0.08392277777777778;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
