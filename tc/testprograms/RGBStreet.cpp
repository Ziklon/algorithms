#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;
typedef vector<int> vi; 
typedef vector<string> vs; 
typedef pair<int, int> pii; 
typedef long long ll;
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)
#define fill(x,i) memset(x,i,sizeof(x))
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define oo 1<<29

int A[20][3];
int P[20][3];
class RGBStreet {
public:int estimateCost(vector <string> houses) {	
		REP(i,0,houses.sz)
			sscanf(houses[i].c_str(),"%d %d %d",&A[i][0],&A[i][1],&A[i][2]);
		int ans=1<<30;
		fill(P,-1);
		for(int i=houses.sz-2;i>=0;i--){
			REP(j,0,3){
				int index=0;
				int sum=oo;
				REP(k,0,3)if(k!=j && sum>A[i+1][k]){
					sum=A[i+1][k];
					index=k;
				}
				A[i][j]+=sum;
				P[i][j]=index;
			}
		}
		int root=-1;
		REP(i,0,3)if(ans>A[0][i]){
			root=i;
			ans=A[0][i];
		}
		vector<int> path;
		REP(i,0,houses.sz){
			path.push_back(root);
			root=P[i][root];	
		}
		REP(i,0,path.sz)cout<<path[i]<<" ";
		cout<<endl;
		return ans;

	}

};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	RGBStreet *obj;
	int answer;
	obj = new RGBStreet();
	clock_t startTime = clock();
	answer = obj->estimateCost(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"1 100 100","100 1 100","100 100 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"1 100 100","100 100 100","1 100 100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 102;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"26 40 83","49 60 57","13 89 99"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 96;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"30 19 5","64 77 64","15 19 97","4 71 57","90 86 84","93 32 91"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 208;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"71 39 44","32 83 55","51 37 63","89 29 100","83 58 11","65 13 15","47 25 29","60 66 19"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 253;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
