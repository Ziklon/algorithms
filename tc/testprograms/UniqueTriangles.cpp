#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;
typedef vector<int> vi; 
typedef vector<string> vs; 
typedef pair<int, int> pii; 
typedef long long ll;
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)
#define INF 1<<29
#define fill(x,i) memset(x,i,sizeof(x))
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define EPS 1e-12
set<vector<double> >S;
bool intro(vector<double> v){
	vector<double> u;
	return 0;
	foreach(S,it){
		u=*it;
		//do{
			if(abs((u[0]*v[1])-(u[1]*v[0]))<=EPS && abs((u[2]*v[1])-(u[1]*v[2]))<=EPS)return 1;
		
		//}while(next_permutation(all(v)));
	
	}
	return 0;

}

class UniqueTriangles {
public:int howMany(vector <int> x, vector <int> y) {	
		int ans=0;
		S.clear();
		REP(i,0,x.sz)
			REP(j,i+1,x.sz)
				REP(k,j+1,x.sz){
					vector<double> v(3),u(3);
					int A[]={i,j,k};
					v[1]=hypot(x[i]-x[j],y[i]-y[j]);
					v[0]=hypot(x[i]-x[k],y[i]-y[k]);
					v[2]=hypot(x[k]-x[j],y[k]-y[j]);				
					//sort(all(v));
					bool flag=1;
					int cnt=1;
					
					do{
						double m1=(y[A[1]]-y[A[0]]+0.0)/(x[A[1]]-x[A[0]]);
						double m2=(y[A[2]]-y[A[0]]+0.0)/(x[A[2]]-x[A[0]]);
						//cout<<m1<<" "<<m1<<endl;
						double angle=atan((m1-m2)/(1.0+(m1*m2)));						
						if(abs(angle)<=(1e-12))flag=0;
						if(cnt&1){
							u[cnt/2]=angle;						
							cout<<cnt<<endl;
						}
						cnt++;
						//REP(i,0,3)cout<<A[i]<<" ";
						//cout<<endl;					
					
					}while(next_permutation(A,A+3));
					
					if(flag==0)continue;
					sort(all(u));
					S.insert(u);
				}
		
		return S.sz;				
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	UniqueTriangles *obj;
	int answer;
	obj = new UniqueTriangles();
	clock_t startTime = clock();
	answer = obj->howMany(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {0,1,1,0,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,0,1,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,8,-3,1000,-9500,-1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {7,15,4,1007,-9493,6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {-4,2,5,-5,-4,-4,3,1,1,1,2,0,1,1,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {5,2,-4,2,1,3,1,-1,2,0,1,4,-3,1,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 256;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {-24,-22,33,78,-77,-66,76,-54,32,40,-66,-22,-88,-50,-11,93,16,34,-79,-60,-42,-30,-73,65,92,94,67,-74,69,83,-51,91,78,-30,91,85,-78,-5,36,-91};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {91,14,27,-98,35,-14,-89,-12,-78,57,6,-52,-65,-61,-60,46,-84,34,31,11,41,97,-54,47,-12,-69,19,96,43,-45,-38,-71,53,6,-2,-43,-43,15,17,-77};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 9872;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
