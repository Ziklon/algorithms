#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>

#define REP(i,n) for (int i = 0; i < (int)n; i++)

using namespace std;
#define INF 1<<20
int dist[55][55];
int adj[55][55];

class Paths {
public:int secondBest(vector <string> graph, int from, int to) {	
		int ans=1<<20;
		int N=graph.size();
		REP(i,N)REP(j,N)if(graph[i][j]=='X')adj[i][j]=INF;
		else  adj[i][j]=graph[i][j]-'0';

		memcpy(dist,adj,sizeof dist);

		REP(i,N)dist[i][i]=0;
		REP(k,N)REP(i,N)REP(j,N){
			dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);			
		}
		REP(x,N)REP(y,N)if(dist[from][to] < (dist[from][x]+adj[x][y]+dist[y][to])){
			ans=min(ans,dist[from][x]+adj[x][y]+dist[y][to]);
		}							

		if(ans>=INF)return -1;
		return ans;		
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	Paths *obj;
	int answer;
	obj = new Paths();
	clock_t startTime = clock();
	answer = obj->secondBest(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"01111","10111","11011","11101","11110"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"X1119","1X119","11X19","111X1","9111X"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 4;
	p3 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"X1110","1X111","11111","111X1","0111X"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 4;
	p3 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","XX9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X9X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X99X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X9999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X99999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X9999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X99999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X9999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X99999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X9999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X99999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X9999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X99999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXX"
			"XXXX","X999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXXX","X9999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXXX","X99999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXXX","X999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXXX","X9999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXXX","X99999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXXX","X999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXXX","X9999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXXX","X99999999999999999999999999X9XXXXXXXXXXXXXXXXXXXXX","X999999999999999999999999999X9XXXXXXXXXXXXXXXXXXXX","X9999999999999999999999999999X9XXXXXXXXXXXXXXXXXXX","X99999999999999999999999999999X9XXXXXXXXXXXXXXXXXX","X999999999999999999999999999999X9XXXXXXXXXXXXXXXXX","X9999999999999999999999999999999X9XXXXXXXXXXXXXXXX","X99999999999999999999999999999999X9XXXXXXXXXXXXXXX","X999999999999999999999999999999999X9XXXXXXXXXXXXXX","X9999999999999999999999999999999999X9XXXXXXXXXXXXX","X99999999999999999999999999999999999X9XXXXXXXXXXXX","X999999999999999999999999999999999999X9X"
			"XXXXXXXXXX","X9999999999999999999999999999999999999X9XXXXXXXXXX","X99999999999999999999999999999999999999X9XXXXXXXXX","X999999999999999999999999999999999999999X9XXXXXXXX","X9999999999999999999999999999999999999999X9XXXXXXX","X99999999999999999999999999999999999999999X9XXXXXX","X999999999999999999999999999999999999999999X9XXXXX","X9999999999999999999999999999999999999999999X9XXXX","X99999999999999999999999999999999999999999999X9XXX","X999999999999999999999999999999999999999999999X9XX","X9999999999999999999999999999999999999999999999X9X","X99999999999999999999999999999999999999999999999X9","XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 49;
	p3 = 459;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"X"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
