#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define fill(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;

class CondorcetVoting {
public:int winner(vector <string> votes) {	
		for(int i=0;i<votes[0].sz;i++){
			bool ok=1;
			for(int j=0;j<votes[0].sz;j++){
				if(i!=j){
					int a=0,b=0;
					for(int k=0;k<votes.sz;k++){
						if(votes[k][i]<votes[k][j])a++;
						if(votes[k][i]>votes[k][j])b++;
					}
					if(b>=a)ok=0;
				}
			}
			if(ok)return i;
			
		}
		return -1;		
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CondorcetVoting *obj;
	int answer;
	obj = new CondorcetVoting();
	clock_t startTime = clock();
	answer = obj->winner(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"acbd","bacd","bdca"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"abc","bca","cab"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"cezdqcw"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"abcd","abcd","abcd","abcd","abcd","abcd","cbad","cbad","cbad","cbad","cbad","dbca","cbda","cbda"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"abbcbbbaaccaaccbbacbbbaacbccbccacaaacaacaaacbccaac","accbabcaacacbcccbbccbbcaccccccbbcbbcbaccbcbcacbcbc","acacaaabccaaaccabbaaaacabaaabacacbaacbcccbccbcbacb","acbcbabaabbcaababaacbabcacbaccabbaaacccbcabbbcacba","cbbbacbbacccbbabbbcbaabaaaacaacbcbccbaaccbcaaccbcb","cbacbbcbbcbcaaabccabcabbcbacaaabccabbcbacbbacbbaca","cacaabccbbbaaacccacbbcacababbcaaabccbbacbbbccacbaa","bccbbabaaaababcbabbbbcbcacbcbcbacccacacacacacacaab","bccabcaabcabbccaaccbcabaaabbbcaabaaabbbbabbbaabaac","accccbabaaaabcbacabbcbbacaacaaaacccbbbcacaccccaaac","cccbcaababbaacaaabbbaabbccccacaacbacaacbbbaacccbbb","bccccaccbcbbaaaaaaaaccbababcabaaccacbbabbbcabbaaca","cbacacaabbccacaabbbbbbccabcbbaccacbcacacacbccbcbcc","baabcabccaaaaccbaacaaccacccbcbbaaacacaccbcaacbbbba","bccaaaabcbbcbbbbbcaabaacccbccbbcbabacaaccbccaababb","cacbbbbcabbcbaabbccbaccbaacbbcbbbbcabababccabbbcab","bccbcacbccaacacccccaacabacbacbbbcaabacacccbbbccaac","aaaccbbbacacbaaaacacaabbaacccbcccbcabbccbcacabbacb","bcabcbbacbacacbbaaccabcabcbbaabacacccbbbcabbbc"
			"aacb","bacbbbbaccbaabbbbbcaccbbcbcabbbccbcacccbabbbcaaacc","bababcacbacacacccccbbcacccbbcbccaccaacbbcacabcabba","aaabaccbbcacaacbabccccabbbcbcccccccbaacbccbaacbbbc","abacbaaaaaccacbbbaccbbbabaacbcbccacccabaaaacbaabbb","cbbcacbaccabbbcaacbcbabbcabcbaccabcbbbcabcbcbaacca","babbacaaacbbcbbbabbaabcbabcbbaacaacbbbaaaabbcabcca","cbabaacabcccaabbbacccaccbacabbaacaaabcbcccbcbcccaa","aabbbcbacabbcabcbcccbccaccbcacbaacabbbccaabaabcbba","caccabcccabbaacbabbaaaccccccccaaccbcaccacaabacccba","bbbcabcababaabacaccacabcbccacccbbbbcbbbaccabcabaab","bbbcaababbbbababababcbbbbaaabbacaabcacbbccbcaaaaaa","bcbacccaaaabbcbcabbbcababbcacaabbbbcbbacbaabcbaccb","bbcaccaaccacbbaaccaaaabccbbacbcbacaacbacbccaaccbba","abaaacbccbbabbcaccbaccccbaaacaccccababcbccccbabcca","acccaccababababacbbaccbcabcaccbabaabacbaacaaacabca","aaabababccabccbcbabcabcacbbcacbcbbbabcabacbcaacacb","ccacbaabbcbaccaccbbabbabbabaacccabcaaccacacccbbcab","bbaabcbabbbaacacabaabcbaaabacbccccaccaaaacbacabbbc","abaaaccaacbbcacacbcbccbaaacbbcbacabbbcca"
			"bbbccaaaac","bbacbabbcacbbacccaccbcbcabbcbaacabbbbabbaaabaacacb","cacbacbccbcbabacccacabcacacabbcabbccaacacbaaacaacb","bacbbacbccccabcbabcbbcbacacaaabcbaccccaabaabbacbcb","abcaaccccabccaaaaccbabccacbcaaaacaccaccccccaaaabaa","bacabcbccbacccbaaaabcbbaabbabaabcabacccbcabacccbcc","babaccbbcbcbacccabccbcccbaaaaacccabcbccbbbbcbabcbc","cccbbaccbabbbbcbcbcbaaacbbcacbcaacacacccbcabccbcaa","caacbcacbccaaaaacaaababbcccacbabaaabcaacaaababacba","cccccaccabcaacababbacbcbabbcaacbacbabbbccbabcbabbb","ccbcababcabcbcccaccccacabcbaaacaabccbbaabaccbaccab","abbbcacaccabcbccbacabbbccaccaaaacccabbcbacbbccabcb","bacabccabcbbcaacbcacabcbccacbcccbcbcaaaabbaabccabb"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"h","e","l","l","o"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
