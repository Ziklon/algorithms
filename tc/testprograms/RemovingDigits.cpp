#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;
typedef long long ll;
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define INF 1<<29
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)

bool ok(char c, vector<int>& v, string& num, int & pos){
	if(v[c-'0']==0)return 0;
	int j=0;
	for(j=pos;j<num.sz;j++)if(num[j]==c)break;
	
	if(j==num.sz)return 0;
	
	vector<int> tmp(10,0);
	int mv=j;
	for(;j<num.sz;j++)tmp[num[j]-'0']++;
	
	for(int k=0;k<10;k++)if(tmp[k]<v[k])return 0;
	
	pos=mv+1;
	return 1;	

}
class RemovingDigits {
public:string maxNumber(string number, string digits) {	
		vector<int> v(10,0);
		for(int i=0;i<number.sz;i++)v[number[i]-'0']++;
		for(int i=0;i<digits.sz;i++)v[digits[i]-'0']--;
		
		int N=number.sz-digits.sz;
		string ans;
		int pos=0;
		for(int i=0;i<N;i++){
			for(char c='9';c>='0';c--){
				if(ok(c,v,number,pos)){
					ans+=c;
					v[c-'0']--;
			
					break;
				}
			}
		}
		return ans;		
						
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	RemovingDigits *obj;
	string answer;
	obj = new RemovingDigits();
	clock_t startTime = clock();
	answer = obj->maxNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "12345";
	p1 = "513";
	p2 = "24";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "112352";
	p1 = "1123";
	p2 = "52";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "123456654321";
	p1 = "612534";
	p2 = "654321";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "654321123456";
	p1 = "612534";
	p2 = "654321";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "2654982765982365";
	p1 = "2345978";
	p2 = "698265265";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "96949171972825919472";
	p1 = "9779249281511";
	p2 = "9699742";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
