#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#define sz size()
#define REP(i,n) for (int i = 0; i < (int)n; i++)
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)

using namespace std;
#define MAXN 500
bool vis[MAXN][MAXN];
bool vis2[MAXN][MAXN];
void paintTo(int x1, int y1, int x2, int y2){
	if(x1==x2){
		for(int i=min(y1,y2);i<=max(y1,y2);i++)vis[x1][i]=1;
	}else{
		for(int i=min(x1,x2);i<=max(x1,x2);i++)vis[i][y2]=1;
	}
}
int dx[4]={0,0,1,-1};
int dy[4]={1,-1,0,0};

bool bfs(int x, int y){

	queue<pair<int,int> >Q;
	vis2[x][y]=1;
	Q.push(make_pair(x,y));
	while(!Q.empty()){
		pair<int,int> cur=Q.front();Q.pop();
		REP(i,4){
			int X=cur.first+dx[i];
			int Y=cur.second+dy[i];
			if(min(X,Y)<0 || max(X,Y)>=MAXN)return 1;			
			if(vis2[X][Y]==0 && vis[X][Y]==0){
				Q.push(make_pair(X,Y));
				vis2[X][Y]=1;
			}
		}
	}
	return 0;

}

class PointInPolygon {
public:string testPoint(vector <string> vertices, int X, int Y) {	
		string ans="INTERIOR";
		map<double,int> M1,M2;
		int N=1,M=1,tmp,TAM=vertices.sz;
		set<double> S1,S2;
		S1.insert(X);		
		S1.insert(X+0.5);
		S1.insert(X-0.5);
		S2.insert(Y);
		S2.insert(Y+0.5);
		S2.insert(Y-.5);
		REP(i,vertices.sz){
			stringstream ss(vertices[i]);
			int x1,y1;
			ss>>x1>>y1;
			S1.insert(x1-.5);
			S1.insert(x1);
			S1.insert(x1+.5);			
			S2.insert(y1-.5);
			S2.insert(y1);			
			S2.insert(y1+.5);	
		}
		foreach(S1,it)
			M1[*it]=N++;

		foreach(S2,it)
			M2[*it]=M++;

		memset(vis,0,sizeof vis);
		memset(vis2,0,sizeof vis2);		
		REP(i,vertices.sz){
			stringstream ss1(vertices[i]);
			stringstream ss2(vertices[(i+1)%TAM]);
			int x1,y1,x2,y2;
			ss1>>x1>>y1;
			ss2>>x2>>y2;
			paintTo(M1[x1],M2[y1],M1[x2],M2[y2]);						
		}
		if(vis[M1[X]][M2[Y]])return "BOUNDARY";

		if(bfs(M1[X],M2[Y]))return "EXTERIOR";

		return ans;		
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	PointInPolygon *obj;
	string answer;
	obj = new PointInPolygon();
	clock_t startTime = clock();
	answer = obj->testPoint(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	string p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"0 0","0 10","10 10","10 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 5;
	p3 = "INTERIOR";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"0 0","0 10","10 10","10 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	p2 = 15;
	p3 = "EXTERIOR";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"0 0","0 10","10 10","10 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 10;
	p3 = "BOUNDARY";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"-100 -90","-100 100","100 100","100 -100","-120 -100","-120 100","-130 100","-130 -110","110 -110","110 110","-110 110","-110 -90"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = "EXTERIOR";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"0 0","0 1000","1000 1000","1000 800","200 800","200 600","600 600","600 400","200 400","200 200","1000 200","1000 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	p2 = 500;
	p3 = "INTERIOR";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"0 1000","1000 1000","1000 800","200 800","200 600","600 600","600 400","200 400","200 200","1000 200","1000 0","0 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 322;
	p2 = 333;
	p3 = "EXTERIOR";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"500 0","500 100","400 100","400 200","300 200","300 300","200 300","200 400","100 400","100 500","0 500","0 400","-100 400","-100 300","-200 300","-200 200","-300 200","-300 100","-400 100","-400 0","-500 0","-500 -100","-400 -100","-400 -200","-300 -200","-300 -300","-200 -300","-200 -400","-100 -400","-100 -500","0 -500","0 -400","100 -400","100 -300","200 -300","200 -200","300 -200","300 -100","400 -100","400 0"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 200;
	p2 = 200;
	p3 = "INTERIOR";
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	string t0[] = {"1 0","2 0","2 1","3 1","3 0","4 0","4 -1","5 -1","5 0","6 0","6 2","0 2","0 3","-1 3","-1 4","0 4","0 6","1 6","1 7","0 7","0 8","-2 8","-2 2","-8 2","-8 0","-7 0","-7 -1","-6 -1","-6 0","-4 0","-4 1","-3 1","-3 0","-2 0","-2 -6","0 -6","0 -5","1 -5","1 -4","0 -4","0 -3","-1 -3","-1 -2","0 -2","0 -1","1 -1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = "INTERIOR";
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 8 -----
	string t0[] = {"{0 0","3 0","3 4","-2 4","-2 0","-1 0","-1 3","2 3","2 1","0 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 2;
	all_right = KawigiEdit_RunTest(8, p0, p1, p2, false, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
