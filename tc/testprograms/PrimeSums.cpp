#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

typedef long long ll;
#define all(v) (v).begin(),(v).end()

#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)

#define fill(x,i) memset(x,i,sizeof(x))

#define MAX 500005
bool criba[MAX];
int C[MAX];
ll dp[2][MAX];
class PrimeSums {
public:long long getCount(vector <int> bag) {	
		fill(criba,0);
		criba[0]=criba[1]=1;

		sort(all(bag));
		fill(C,0);
		REP(i,0,bag.sz)C[bag[i]]++;	
		bag.erase(unique(all(bag)),bag.end());

		for(int i=2;i*i<MAX;i++)
			if(!criba[i])				
				for(int j=i*i;j<MAX;j=j+i)
					criba[j]=1;

		fill(dp,0);
		dp[1][0]=1;
		
		REP(i,0,bag.sz){				
			int ux=i&1;
			int uy=!ux;
			REP(j,0,MAX)dp[ux][j]=0;															
			REP(j,0,MAX){				
				REP(k,0,C[bag[i]]+1){	
					int val=((k)*bag[i])+j;
					if(val<MAX)dp[ux][val]+=dp[uy][j];
				}
			}
			REP(j,0,MAX)dp[uy][j]=dp[ux][j];			
		}
		ll ans=0;
		int ux=bag.sz&1;
		REP(i,0,MAX)if(criba[i]==0)ans+=dp[ux][i];

		return ans;
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	PrimeSums *obj;
	long long answer;
	obj = new PrimeSums();
	clock_t startTime = clock();
	answer = obj->getCount(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	long long p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,1,2,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,1,1,1,1,1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {4,6,8,10,12,14};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,2,4,8,16,32,64,128};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 54ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1234,5678,9012,3456,7890,2345,6789,123,4567,8901};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 97ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {0,0,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3ll;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
