#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)
#define INF 1<<29
#define fill(x,i) memset(x,i,sizeof(x))

bool vis[55][55];
bool pas[55][55];
int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};
vector<string> v;

int RR=INF;
int res=0;
void dfs(int x, int y, char c){
	
	vis[x][y]=1;
	REP(i,0,4){
		int X=x+dx[i];
		int Y=y+dy[i];
		if(min(X,Y)>=0 && X<v.sz && Y<v[0].sz && v[X][Y]<=c &&!vis[X][Y])
			dfs(X,Y,c);
		if(min(X,Y)>=0 && X<v.sz && Y<v[0].sz && v[X][Y]>c)
			RR=min(RR,v[X][Y]-'0');
	}		
}

void update(int x, int y, char c){
	int ans=0;
	pas[x][y]=1;
	res+=c-v[x][y];
	v[x][y]=c;
	REP(i,0,4){
		int X=x+dx[i];
		int Y=y+dy[i];
		if(min(X,Y)>=0 && X<v.sz && Y<v[0].sz && vis[X][Y] &&!pas[X][Y]){	
			
			update(X,Y,c);
		}
	}

}

bool out(){
	REP(i,0,v.sz)if(vis[i][0] || vis[i][v[0].sz-1])return 1;
	REP(i,0,v[0].sz) if(vis[0][i] || vis[v.sz-1][i])return 1;
	return 0;	
}

class PoolFiller {
public:int getCapacity(vector <string> layout) {	
			fill(vis,0);
			v=layout;
			res=0;
			RR=INF;
			REP(i,0,v.sz)REP(j,0,v[0].sz){
				fill(vis,0);
				RR=INF;
				dfs(i,j,v[i][j]);
				
				if(!out()){				
					fill(pas,0);				
					update(i,j,RR+'0');
					
				}		
			}
			
			return res;

	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PoolFiller *obj;
	int answer;
	obj = new PoolFiller();
	clock_t startTime = clock();
	answer = obj->getCapacity(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"16661","61116","16661"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 15;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"999999","955119","955119","999999"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 48;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"111111111","115111611","131516161","115111611","111111111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"1111111111111","1555555555551","1511111111151","1511199911151","1511192911151","1511199911151","1511111111151","1555555555551","1111111111111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 151;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
