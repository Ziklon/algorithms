#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)

#define fill(x,i) memset(x,i,sizeof(x))

int dp[5000][2000];
vector<pair<int,int> > fr[9000];
map<string,vector<int> >M;
map<string,int> mapa;
vector<string> words;

int get(int x, int prev){
	REP(i,0,fr[prev].sz)if(fr[prev][i].first==x)
		return fr[prev][i].second;
	return 0;
}

int go(int index, int opt){
	if(index>=words.sz)return 0;	
	int& ref=dp[index][opt];
	if(ref!=-1)return ref;
	ref=0;
	vector<int> v=M[words[index]];
	REP(i,0,v.sz){
		ref=max(ref,go(index+1,v[i])+get(v[i],opt));	
	}			
	return ref;
}

class ProbabilisticTranslator {
public:int maximumFidelity(vector <string> text, vector <string> dictionary, vector <string> frequencies) {	
		M.clear();
		mapa.clear();
		words.clear();
		REP(i,0,9000)
			fr[i].clear();
		REP(i,0,text.sz){
			stringstream ss(text[i]);
			string word;
			while(ss>>word)
				words.push_back(word); 
		}
		fill(dp,-1);

		REP(i,0,dictionary.sz){

			string cur=dictionary[i],key,value;
			stringstream ss(cur);
			ss>>key>>value;
			vector<int> v;
			while( ss>> value){
				if(mapa.count(value)==0)
					mapa[value]=mapa.sz+1;
				v.push_back(mapa[value]);			
			}
			if(M.count(key)==1){
				REP(j,0,v.sz)
					M[key].push_back(v[j]);
			}else
				M[key]=v;							
		}

		REP(i,0,frequencies.sz){
			istringstream is(frequencies[i]);
			string from,to;
			int val;
			is>>from>>to>>val;
			if(mapa.count(from)==0)
				mapa[from]=mapa.sz+1;

			if(mapa.count(to)==0)
				mapa[to]=mapa.sz+1;

			fr[mapa[from]].push_back(make_pair(mapa[to],val));	
		}

		return go(0,0);	

	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ProbabilisticTranslator *obj;
	int answer;
	obj = new ProbabilisticTranslator();
	clock_t startTime = clock();
	answer = obj->maximumFidelity(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"a b c"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"a : x y","b : y z","c : x z"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"y z 20","x y 10","z x 5"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 30;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"a b c"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"a : x y","b : p q","c : x y"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"x p 100","x q 10","q x 10"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 100;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"a b","c"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"a : x y","b : p q","c : x y"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"x p 100","x q 97","q x 97"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 194;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"a","bb c"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"a : a a","bb : b","c : c","ccc : a"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	string t2[] = {"y z 2","x y 10","z x 5"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
