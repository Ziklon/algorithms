#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#define sz size()
#define REP(i,n) for (int i = 0; i < (int)n; i++)

using namespace std;
int dp[51];
vector<string> dic;
string mess;
int go(int pos){
	if(pos>=mess.sz)return 1;
	int& ref=dp[pos];
	if(ref!=-1)return ref;
	ref=0;
	REP(i,dic.sz){
		if(pos+dic[i].sz<=mess.sz){
			string tmp=mess.substr(pos,dic[i].sz);
			if(tmp==dic[i])
				ref+=go(pos+tmp.sz);
		}
	}
	ref=min(ref,2);
	return ref;
}

class MessageMess {
public:string restore(vector <string> dictionary, string message) {	
		string ans;
		dic=dictionary;
		mess=message;
		memset(dp,-1,sizeof dp);
		int ret=go(0);
		if(ret==0)return "IMPOSSIBLE!";
		if(ret>1)return "AMBIGUOUS!";
		int pos=0;
		while(pos<mess.sz){
			REP(i,dic.sz){				
				if(pos+dic[i].sz<=mess.sz ){
					string tmp=mess.substr(pos,dic[i].sz);
					if(tmp==dic[i] && go(pos+tmp.sz)==1){					
						if(ans!="")ans+=" ";
						ans+=dic[i];
						pos+=dic[i].sz;
						break;
					}					
				}
			}
		}		
		return ans;		
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	MessageMess *obj;
	string answer;
	obj = new MessageMess();
	clock_t startTime = clock();
	answer = obj->restore(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"HI","YOU","SAY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "HIYOUSAYHI";
	p2 = "HI YOU SAY HI";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"ABC","BCD","CD","ABCB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "ABCBCD";
	p2 = "AMBIGUOUS!";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"IMPOSS","SIBLE","S"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "IMPOSSIBLE";
	p2 = "IMPOSSIBLE!";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"IMPOSS","SIBLE","S","IMPOSSIBLE"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "IMPOSSIBLE";
	p2 = "IMPOSSIBLE";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
