#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath> 
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <ctime> 
using namespace std; 

int get_dec(string s){
	int index=s.find('.');
	if(index==-1)return 0;
	return s.size()-index-1;
}
double todouble(string s){
	double ans;
	istringstream is(s);
	is>>ans;
	return ans;
}

double rnd_two(string s, int dig, bool up){
	double pw=pow(10.0,dig);
	double res=todouble(s);
	res=res*pw;
	if(up)
		res=round(res);
	else
		res=floor(res);
	return res/pw;
}

double rnd(string s, int dig){
	if(s.find('.')==-1)return todouble(s);	
	int index=s.find('.');
	int next=index+1+dig;
	if(s[next]>='6')return rnd_two(s,dig,1);
	if(s[next]<='4')return rnd_two(s,dig,0);
	if(next+1<s.size()){
		for(int i=next+1;i<s.size();i++)if(s[i]!='0')return rnd_two(s,dig,1);
		return rnd_two(s,dig,0);
	}
	if(next-1==index)return rnd_two(s,dig,0);
	int val=s[next-1]-'0';
	if(val%2==0)return rnd_two(s,dig,0);
	else return rnd_two(s,dig,1);
}
string tostring(double n){
	stringstream ss;
	ss<<n;
	return ss.str();
}
class SignificanceArithmetic {
public:
	string evaluate(string expression) {
		int index=expression.find('+');
		string sa=expression.substr(0,index);
		string sb=expression.substr(index+1);		
		int digits=min(get_dec(sa),get_dec(sb));
		double da=rnd(sa,digits);
		double db=rnd(sb,digits);
		string ans=tostring(da+db);
		if(digits) {
			if(ans.find('.')==-1)ans=ans+".0";
			index=ans.find('.');
			while(ans.size()-1-index<digits)ans=ans+'0';
		}
		return ans;
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	SignificanceArithmetic *obj;
	string answer;
	obj = new SignificanceArithmetic();
	clock_t startTime = clock();
	answer = obj->evaluate(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "2+2";
	p1 = "4";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "1.234+0.000";
	p1 = "1.234";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "1.234+0.006";
	p1 = "1.240";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "12.57+2.6";
	p1 = "15.2";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "5.50005+0";
	p1 = "6";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "2.5+2";
	p1 = "4";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = "0.00+000";
	p1 = "0";
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = "983.17+76.8";
	p1 = "1060.0";
	all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
