#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

#define MOD 43200

class BadClock {
public:double nextAgreement(string trueTime, string skewTime, int gain) {	
		//if(trueTime==skewTime)return 0.0;
		double peki=0;
		int a,b,c;
		int d,e,f;
		int sa,sb;
		sscanf(trueTime.c_str(),"%d:%d:%d",&a,&b,&c);
		sscanf(skewTime.c_str(),"%d:%d:%d",&d,&e,&f);
		sa=(3600*a)+(b*60)+(c);		
		sb=(3600*d)+(e*60)+(f);
		int val=0;
		if(gain>0)
			val=(MOD+sa-sb)%MOD;
		else
			val=(MOD-sa+sb)%MOD;
		peki=(double)val/abs(gain);
		return peki;		
	}

};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, int p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << p2;
	cout << "]" << endl;
	BadClock *obj;
	double answer;
	obj = new BadClock();
	clock_t startTime = clock();
	answer = obj->nextAgreement(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	int p2;
	double p3;
	
	{
	// ----- test 0 -----
	p0 = "07:07:07";
	p1 = "07:07:07";
	p2 = 1776;
	p3 = 0.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "11:59:58";
	p1 = "12:03:28";
	p2 = -3;
	p3 = 70.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "12:03:28";
	p1 = "11:59:58";
	p2 = 3;
	p3 = 70.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "03:03:02";
	p1 = "03:01:47";
	p2 = 5;
	p3 = 15.0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "03:03:02";
	p1 = "03:01:47";
	p2 = -5;
	p3 = 8625.0;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "07:08:09";
	p1 = "09:08:07";
	p2 = -321;
	p3 = 22.42367601246106;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
