#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;

#define all(v) (v).begin(),(v).end()

#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)

struct node{
	int a,b,v;
	node(){}
	node(int _a, int _b, int _c){
		a=_a;
		b=_b;
		v=_c;
	}
};

int getIndex(vector<int>&v, int n){
	REP(i,0,v.sz)if(n==v[i])return i;
	return 0;
}

class VolumeGuess {
public:int correctVolume(vector <string> queries, int numberOfBoxes, int ithBox) {	

		vector<node> vn;
		set<int> S;
		REP(i,0,queries.sz){
			int a,b,c;
			sscanf(queries[i].c_str(),"%d,%d,%d",&a,&b,&c);
			vn.push_back(node(a,b,c));			
			S.insert(c);
		}
		S.insert(1000000000);
		vector<int> v(all(S));

		do{
			bool ok=1;
			for(int i=0;i<vn.sz;i++){
				int a=vn[i].a;
				int b=vn[i].b;
				int n=vn[i].v;
				int index=getIndex(v,n)+1;
				if(index!=a && index!=b)ok=0;
			}
			if(ok)return v[ithBox-1];
		}while(next_permutation(all(v)));

		return 0;		
	}

};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	VolumeGuess *obj;
	int answer;
	obj = new VolumeGuess();
	clock_t startTime = clock();
	answer = obj->correctVolume(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"1,2,10","1,3,10","2,3,20"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 1;
	p3 = 10;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"1,02,10","2,3,010","1,3,20"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 2;
	p3 = 10;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"1,2,31","1,3,9","1,4,31","2,4,32","3,4,9","3,2,9"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 1;
	p3 = 31;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"1,2,31","1,3,9","1,4,31","2,4,32","3,4,9","3,2,9"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 3;
	p3 = 9;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
