#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#define sz size()
#define REP(i,n) for (int i = 0; i < (int)n; i++)

using namespace std;
double dp[55];
bool vis[55];
int pa[55];
int pb[55];
int prev[55];
double go(int idx){	
	if(vis[idx]==1)return dp[idx];
	vis[idx]=1;
	double ante=go(prev[idx]);
	double opo=100-ante;
	
	dp[idx]=((ante*pa[idx])+(opo*pb[idx]))/100.0;
	return dp[idx];			
}

class ProbabilityTree {
public:vector <int> getOdds(vector <string> tree, int L, int R) {	
		vector <int> ans;
		memset(vis,0,sizeof vis);
		vis[0]=1;
		REP(i,tree.sz){
			istringstream is(tree[i]);
			if(i==0){
				int tmp;				
				is>>tmp;
				dp[0]=tmp;
			}else{
				int a,b,c;
				is>>a>>b>>c;
				prev[i]=a;
				pa[i]=b;
				pb[i]=c;								
			}
		}
		REP(i,tree.sz)if(go(i)>=L && go(i)<=R){
			cout<<i<<" "<<go(i)<<endl;
			ans.push_back(i);		
		}
		return ans;		
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, bool hasAnswer, vector <int> p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	ProbabilityTree *obj;
	vector <int> answer;
	obj = new ProbabilityTree();
	clock_t startTime = clock();
	answer = obj->getOdds(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p3.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p3[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p3.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p3[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	vector <int> p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"40","0 70 10"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 30;
	p2 = 50;
	int t3[] = {0,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"20","2 50 50","0 50 50"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 49;
	p2 = 51;
	int t3[] = {1,2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"10","0 99 41","1 40 3","2 91 43"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 81;
	p2 = 88;
	p3.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"79","0 64 52","1 70 87","0 38 99","1 24 8"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 47;
	p2 = 81;
	int t3[] = {0,1,2,3};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"51","29 58 3","6 56 86","18 97 1","44 99 25","33 69 90","27 67 49","32 15 19","33 1 21","45 12 33","29 24 40","45 86 74","40 30 65","0 18 27","1 90 65","0 47 62","40 81 72","42 25 56","45 16 81","8 94 92","29 41 92","24 4 29","32 56 91","20 16 77","1 35 79","45 77 61","6 50 19","20 69 43","4 6 16","15 55 26","42 73 90","40 8 49","33 16 33","15 95 47","9 66 40","25 80 39","35 72 70","27 10 36","40 36 10","32 2 48","33 44 23","22 51 45","25 8 43","18 32 96","45 41 74","0 51 6","18 48 15"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	p2 = 82;
	int t3[] = {0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,20,21,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
