#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;
typedef vector<int> vi; 
typedef vector<string> vs; 
typedef pair<int, int> pii; 
typedef long long ll;
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)
#define fill(x,i) memset(x,i,sizeof(x))
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)

int lcm(int a, int b){
	return a*b/(__gcd(a,b));
}

double getVal(double n, int b){
	while(n<0)
		n=n+b;
	while(n>=b){
		n-=b;
	}
	return n;
}

class Musical {
public:string loser(int n, double _time) {	
		int P=lcm(1000,lcm(n-1,n));
		int S=P/10;		
		vector<int> chair;
		vector<double> boy;		
		int val=P/(n-1);
		REP(i,0,n-1)
			chair.push_back(val*i);
		val=P/n;
		REP(i,0,n)
			boy.push_back(i*val);
		reverse(boy.begin()+1,boy.end());
		REP(i,0,n){
			boy[i]=getVal(0.0+boy[i]+(_time*S),P);			
		}
		int peki=0;
		double dis=0;
		REP(i,0,n){
			double aux=1<<29;
			REP(j,0,n-1){
				aux=min(aux,min(getVal(boy[i]-chair[j],P),
					getVal(-boy[i]+chair[j],P)));
			}
			if(aux>dis){
				dis=aux;
				peki=i;
			}
		}	
		return string(1,'A'+peki);	
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, double p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	Musical *obj;
	string answer;
	obj = new Musical();
	clock_t startTime = clock();
	answer = obj->loser(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	double p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 1.2;
	p2 = "B";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 12.0;
	p2 = "A";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 26;
	p1 = 100.0;
	p2 = "N";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	p1 = 15.0;
	p2 = "A";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
