#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)
#define fill(x,i) memset(x,i,sizeof(x))
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;

class Surveyor {
public:int area(string direction, vector <int> length) {	
		vector<int>x,y;
		x.push_back(0);
		y.push_back(0);
		REP(i,0,direction.sz){
			switch(direction[i]){
				case 'N':
					x.push_back(x[i]);
					y.push_back(y[i]-length[i]);	
					break;				
				case 'S':
					x.push_back(x[i]);
					y.push_back(y[i]+length[i]);	
					break;
				case 'W':
					x.push_back(x[i]-length[i]);
					y.push_back(y[i]);	
					break;
				case 'E':
					x.push_back(x[i]+length[i]);
					y.push_back(y[i]);	
					break;
			}
		}
		
		double area=.0;
		REP(i,1,x.sz-1){
			int x1=x[i]-x[0];
			int x2=x[i+1]-x[0];
			int y1=y[i]-y[0];
			int y2=y[i+1]-y[0];
			int cross=x2*y1-x1*y2;
			area+=cross;
		}
		return abs(area/2.);		
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	Surveyor *obj;
	int answer;
	obj = new Surveyor();
	clock_t startTime = clock();
	answer = obj->area(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "NWWSE";
	int t1[] = {10,3,7,10,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 100;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "NESWNWSW";
	int t1[] = {20,200,30,100,20,30,10,70};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4700;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
