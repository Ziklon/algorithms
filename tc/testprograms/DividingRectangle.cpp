#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define fill(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long lcm(long long a,long long b){return a*(b/gcd(a,b));}

class DividingRectangle {
public:long long maxProduct(vector <string> rec) {
		long long ans=0;
		int N=rec.sz;
		int M=rec[0].sz;
		for(int i=1;i<rec.sz;i++)
			for(int j=i;j+1<rec.sz;j++){
				long long a=0,b=0,c=0;
				for(int x=0;x<i;x++)for(int y=0;y<rec[x].sz;y++)a+=rec[x][y]-'0';
				for(int x=i;x<=j;x++)for(int y=0;y<rec[x].sz;y++)b+=rec[x][y]-'0';
				for(int x=j+1;x<rec.sz;x++)for(int y=0;y<rec[x].sz;y++)c+=rec[x][y]-'0';
				ans=max(ans,a*b*c);	
			}
		for(int i=1;i<rec[0].sz;i++)
			for(int j=i;j+1<rec[0].sz;j++){
				long long a=0,b=0,c=0;
				for(int x=0;x<rec.sz;x++)for(int y=0;y<i;y++)a+=rec[x][y]-'0';
				for(int x=0;x<rec.sz;x++)for(int y=i;y<=j;y++)b+=rec[x][y]-'0';
				for(int x=0;x<rec.sz;x++)for(int y=j+1;y<rec[0].sz;y++)c+=rec[x][y]-'0';
				ans=max(ans,a*b*c);	
			}
			
		
		for(int i=1;i<rec.sz;i++)
			for(int j=1;j<rec.sz;j++){
				long long a=0,b=0,c=0,d=0;
				for(int x=0;x<i;x++)for(int y=0;y<j;y++)a+=rec[x][y]-'0';
				for(int x=0;x<i;x++)for(int y=j;y<M;y++)b+=rec[x][y]-'0';
				
				for(int x=i;x<N;x++)for(int y=0;y<j;y++)c+=rec[x][y]-'0';
				
				for(int x=i;x<N;x++)for(int y=j;y<rec[x].sz;y++)d+=rec[x][y]-'0';
				ans=max(ans,(a+b)*c*d);
				ans=max(ans,(a+c)*b*d);
				ans=max(ans,(d+b)*a*c);	
				ans=max(ans,(d+c)*a*b);			
			}				
	
		return ans;				
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	DividingRectangle *obj;
	long long answer;
	obj = new DividingRectangle();
	clock_t startTime = clock();
	answer = obj->maxProduct(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	long long p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"11911103"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 108ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"123","456","789"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3264ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"7","9","3"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 189ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","9999999999999999999999999999999999999999999999"
			"9999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","99999999999999999999999999999999999999999999999999","9999999999999999999999999999999999999999"
			};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 421749281250ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"635297797783323291149710354095055118577242126156","665875243816254480764726513504488665100915092810","243224945697250942014392852872317068883778103447","168337172217445687438484094006524504842086420793","972199221207203966673964375899625705210034976971","432499312541448500572059439977587541862102597367","534925785404027015807253606027941092527370401936","372778335569911217588134515977207850592179037273","450056126569778891196270332062116374121130716168","041176612412516787087037181619233835558097718060","444968952154333689031339728264432567963991217099","700599227580053230725622821369049444269383755865","684333009225079729229637336762890610558791470795","347118655870651606934254530543871334198980772260","636181319660619691550597311423066356234215775945","271437381979959633690252259663195110087898975325","328258962905944518132405049465133045268583233534","977804809577164828411498815282455419990551765781"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2131726311ll ;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
