#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;
typedef vector<int> vi; 
typedef vector<string> vs; 
typedef pair<int, int> pii;
typedef long long ll;
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)
#define fill(x,i) memset(x,i,sizeof(x))
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
vector<int> v;

bool can(int size, int width, int height){
	long long tam=0;
	long long curHeight=0;
	long long temp;
	int index=0;
	while(index<v.sz){
		
		tam=v[index]*(size+2);
		index++;		
		while(index<v.sz && tam<width){
			
			temp=(v[index]+1)*(size+2);
			if(temp+tam>width)break;
			
			tam+=temp;
			index++;
				
		}
		if(tam>width)return 0;;
		curHeight+=size*2;	
	}
	return curHeight<=height && index>=v.sz;
	
}

class StringFragmentation {
public:int largestFontSize(string text, int width, int height) {	
		stringstream ss(text);
		string 	cad;
		v.clear();
		while(ss>>cad)v.push_back(cad.sz);
		
		int low=1;
		int hih=1<<20;
		
		cout<<can(50,width,height)<<endl;
		while(low<hih){
			int mid=(low+hih+1)/2;
			if(can(mid,width,height))
				low=mid;
			else
				hih=mid-1;		
		}
		if(low<=7)return -1;
		return low;
		
								
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1 << "," << p2;
	cout << "]" << endl;
	StringFragmentation *obj;
	int answer;
	obj = new StringFragmentation();
	clock_t startTime = clock();
	answer = obj->largestFontSize(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = "ONE TWO THREE FOUR FIVE";
	p1 = 150;
	p2 = 40;
	p3 = 9;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "ONE TWO THREE FOUR FIVE";
	p1 = 150;
	p2 = 60;
	p3 = 10;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "ONE TWO THREE FOUR FIVE";
	p1 = 150;
	p2 = 10000;
	p3 = 28;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "ONE TWO THREE FOUR FIVE";
	p1 = 10000;
	p2 = 10000;
	p3 = 1250;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "ONE TWO THREE FOUR FIVE";
	p1 = 50;
	p2 = 50;
	p3 = -1;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "A";
	p1 = 9;
	p2 = 14;
	p3 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
