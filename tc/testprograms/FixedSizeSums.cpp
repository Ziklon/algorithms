#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;
typedef vector<int> vi; 
typedef vector<string> vs; 
typedef pair<int, int> pii; 
typedef long long ll;
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)
#define INF 1<<29
#define fill(x,i) memset(x,i,sizeof(x))
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)

ll dp[155][155][155];
vector<int>v;
ll go(int sum, int cur, int cnt){	
	if(cnt==0)return sum==0;
	if(sum==0)return cnt==0;
	ll& ref=dp[sum][cur][cnt];
	if(ref!=-1)return ref;
	ref=0;
	for(int i=cur;i>=1;i--)
		if(sum-i>=0)ref+=go(sum-i,i,cnt-1);				
	return ref;	
}
void restore(int sum, int cur, int cnt, ll index){
	if(sum==0)return;
	ll tmp=0;
	for(int i=cur;i>=1;i--){
		if(sum-i>=0){
			ll val=go(sum-i,i,cnt-1);
			if(tmp+val>index){
				v.push_back(i);
				restore(sum-i,i,cnt-1,(index-tmp));
				return;
			}
			tmp+=val;
		}
	}
}
string tos(int n){
	stringstream ss;
	ss<<n;
	return ss.str();
}
class FixedSizeSums {
public:string kthElement(int sum, int count, int index) {	
		fill(dp,-1);
		if(go(sum,sum,count)<=index)return "";
		v.clear();
		restore(sum,sum,count,index);
		string ans=tos(sum);
		REP(i,0,v.sz){
			ans+=i?'+':'=';
			ans+=tos(v[i]);
		}
		return ans;
				
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	FixedSizeSums *obj;
	string answer;
	obj = new FixedSizeSums();
	clock_t startTime = clock();
	answer = obj->kthElement(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = 8;
	p1 = 3;
	p2 = 2;
	p3 = "8=4+3+1";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 13;
	p1 = 1;
	p2 = 0;
	p3 = "13=13";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 13;
	p1 = 13;
	p2 = 0;
	p3 = "13=1+1+1+1+1+1+1+1+1+1+1+1+1";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 7;
	p1 = 10;
	p2 = 3;
	p3 = "";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 17;
	p1 = 2;
	p2 = 4;
	p3 = "17=12+5";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 140;
	p1 = 17;
	p2 = 87654321;
	p3 = "140=40+31+15+15+9+7+4+4+2+2+2+2+2+2+1+1+1";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
