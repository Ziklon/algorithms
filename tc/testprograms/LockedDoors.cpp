#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define pb push_back
#define mp make_pair
#define mem(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long _lcm(long long a,long long b){return a*(b/gcd(a,b));}

bool alf[26];
int di[4]={0,0,1,-1};
int dj[4]={1,-1,0,0};

class LockedDoors {
public:int pathOutside(vector <string> maze) {
		int dx=0,dy=0,W=0,H=0;
		for(int i=0;i<maze.sz;i++)
		  for(int j=0;j<maze[i].sz;j++)
		    if(maze[i][j]=='0'){
		      dx=i;
		      dy=j;
		    }
	  queue<pair<int,pair<int,int> > > Q;
	  Q.push(mp(0,mp(dx,dy)));
	  H=maze.sz;
	  W=maze[0].sz;
	  bool visit[H][W][2];	  
	  mem(visit,0);
	  mem(alf,0);
	  visit[dx][dy][0]=1;
	  while(!Q.empty()){
	    pair<int,pair<int,int> > nodo=Q.front();
	    Q.pop();
	    int x=nodo.second.first; 
	    int y=nodo.second.second;
	    int cost=nodo.first;
	    if(maze[x][y]=='1')return cost;
	    for(int i=0;i<4;i++){
	      int X=x+di[i];
	      int Y=y+dj[i];
	      if(X>=0 && X<W && Y>=0 && Y<H && maze[X][Y]!='#'){
	      	cout<<X<<" - "<<Y<<endl;	         
	          if(maze[X][Y]>='A' && maze[X][Y]<='F' && !alf[maze[X][Y]-'A'])
	            continue;
	          if(maze[X][Y]>='a' && maze[X][y]<='f')
	           alf[maze[X][Y]-'a']=1;
	                       
	          if(!visit[X][Y][0]){
		          visit[X][Y][0]=1;
		          Q.push(mp(cost+1,mp(X,Y)));  
	          }
	          if(!visit[X][Y][1]){
		          visit[X][Y][1]=1;
		          Q.push(mp(cost+1,mp(X,Y)));  
	          }	                
	      }
	    }
	  }
	  return -1;				
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	LockedDoors *obj;
	int answer;
	obj = new LockedDoors();
	clock_t startTime = clock();
	answer = obj->pathOutside(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"1..0","###.","1..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"..0..",".###.","..1.A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"f0.F..1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"0....",".#B#A",".#.#.","b#a#1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 19;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"c.0.C.C.C.1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"###...","#0A.1a","###..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"a#c#eF.1",".#.#.#..",".#B#D###","0....F.1","C#E#A###",".#.#.#..","d#f#bF.1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 55;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	string t0[] = {"0abcdef.FEDCBA1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 14;
	all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
