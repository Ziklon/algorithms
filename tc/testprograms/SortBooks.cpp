#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define pb push_back
#define mp make_pair
#define mem(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define f(i,n) for(int (i)=0;i<(int)(n);(i)++)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long _lcm(long long a,long long b){return a*(b/gcd(a,b));}
void tolower(string &s){
	for(int i=0;i<s.sz;i++)
		s[i]=tolower(s[i]);
}
int space(string &s){
	int p=0;
	string a="";
	stringstream ss(s);
	while(ss>>a)p++;
	return p;
}
bool check(string a){
	tolower(a);	
	if(space(a)>3 )return 1;
	a=' '+a+' ';
	if(a.find(" the ")!=-1 || a.find(" and ")!=-1 || a.find(" of ")!=-1)return 1;
	return 0;
}
class SortBooks {
public:vector <int> checkManually(vector <string> a, vector <string>b ) {	
			vector<int> dev;	
			for(int i=0;i<a.sz;i++){
				if(check(a[i]) && check(b[i]) || (!check(a[i]) && !check(b[i])))
					dev.push_back(i);
			
			}
			return dev;
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SortBooks *obj;
	vector <int> answer;
	obj = new SortBooks();
	clock_t startTime = clock();
	answer = obj->checkManually(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	vector <int> p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"J R R Tolkien","THE Jungle BOOK"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"THE HOBBIT","RUDYARD KIPLING"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"Scaramouche","Dan Brown","War and Peace"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Rafael Sabatini","The Da Vinci Code","Leo Tolstoy"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"Aesop","Little Women","Hans Christian Anderson","The Arabian Nights","Peter Christian Asbornsen","Mr Poppers Penguins","Enid Bagnold","Miss Hickory","Sir James Barrie","The Wizard of OZ","Ludwig Bemelmans","The Five Chinese Brothers","Edith Nesbit Bland","The Enchanted Castle","Edith Nesbit Bland","Five Children and It","Michael Bond","The Children of Green Knowe","James Boyd","Caddie Woodlawn","Walter Brooks","The Runaway Bunny","Margaret Wise Brown","Big Red Barn","Jean De Brunhoff","Old Mother West Wind","Frances Hodgson Burnett","A Little Princess","Frances Hodgson Burnett","Mike Mulligan and His Steam Shovel","Virginia Lee Burton","The Enormous Egg","Eleanor Cameron","The Happy Orpheline","Natalie Savage Carlson","Through the Looking Glass","Miguel Cervantes","Secret of the Andes","Beverly Cleary","Henry Huggins","Elizabeth Coatsworth","The Adventures of Pinocchio","Barbara Cooney","The Little Lame Prince","Paul Creswick","The Courage of Sarah Noble","Alice Dagliesh"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"Aesops Fables","Louisa May Alcott","Fairy Tales","Hans Christian Anderson","East of the Sun and West of the Moon","Richard and Florence Atwater","National Velvet","Carolyn Bailey","Peter Pan","Frank L Baum","Madeline","Claire Huchet Bishop","The Railway Children","Edith Nesbit Bland","The Story of the Treasure Seekers","Edith Nesbit Bland","A Bear Called Paddington","Lucy Boston","Drums","Carol Rylie Brink","Freddy the Detective","Margaret Wise Brown","The Little Fur Family","Moon Goodnight","The Story of Babar","Thornton W Burgess","Little Lord Fauntleroy","Frances Hodgson Burnett","The Secret Garden","Virginia Lee Burton","The Little House","Oliver Butterworth","The Wonderful Flight to the Mushroom Planet","Natalie Savage Carlson","The Family Under the Bridge","Lewis Carroll","Don Quixote","Ann Nolan Clark","Beezus and Ramona","Beverly Cleary","The Cat Who Went to Heaven","Carlo Collodi","Chanticleer and the Fox","Dinah Mulock Craik","Robin Hood","Alice Dagliesh","The Bears on Hemloc"
			"k Mountain"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1,2,6,7,8,10,18,19,23,26,27,36,39,44};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"Lost     Horizon"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"James Hilton"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"andy rooney","joe lofthouse","Theodore Taylor"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"love of life","the arrest","Softly Wandering"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
