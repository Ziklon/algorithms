#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
using namespace std;

#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)

int toi(string s){
	int val;
	istringstream is(s);
	is>>val;
	return val;
}
class ParameterSubstitution {
public:string processParams(string code, vector <string> params) {	
		string peki="";
		REP(i,0,code.sz){
			if(code[i]=='$'){
				string aux="";
				int val=0;
				for(;i+1<code.sz && isdigit(code[i+1]);i++){
					val=(val*10) + (code[i+1]-'0');
					if(val>params.sz || val==0){
						val/=10;
						break;
					}
				}
				if(val==0)peki+=code[i];
				else peki+=params[val-1];
			}else{
				peki+=code[i];
			}
		}
		return peki;		
	}

};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ParameterSubstitution *obj;
	string answer;
	obj = new ParameterSubstitution();
	clock_t startTime = clock();
	answer = obj->processParams(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <string> p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "if ($1 == $2) $3;";
	string t1[] = {"12","12","doWhatIWant()"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "if (12 == 12) doWhatIWant();";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "$3+$1*$2-$7=$10";
	string t1[] = {"myvar","490jri","e09jd9","dlkjfoiej"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "e09jd9+myvar*490jri-$7=myvar0";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "12342123$13231232$2123211242$a$dlkj$";
	string t1[] = {"$2","$1"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "12342123$23231232$1123211242$a$dlkj$";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "{[(+.*-,/\\:;<=>?@)]}_`~|$$1";
	string t1[] = {"1{[(+.*-,/\\:;<=>?@)]}_`~|"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "{[(+.*-,/\\:;<=>?@)]}_`~|$1{[(+.*-,/\\:;<=>?@)]}_`~|";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "$01";
	string t1[] = {"abc"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "$01";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
