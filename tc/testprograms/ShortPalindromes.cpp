#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#define sz size()
#define REP(i,n) for (int i = 0; i < (int)n; i++)

using namespace std;
string dp[55][55];
bool seen[55][55];

string mini(string s, string t){
	if(s.sz!=t.sz){
		if(s.sz<t.sz)return s;
		return t;
	}
	if(s<t)return s;
	return t;
}
string go(string& s, int L, int R){
	if(L>R)return "";
	if(L==R)return string(1,s[R]);

	if(seen[L][R]==0){
		seen[L][R]=1;
		string ret=string(100,'Z');
		if(s[L]==s[R])ret=mini(ret,s[L]+go(s,L+1,R-1)+s[L]);
		else{
			ret=mini(ret,s[L]+go(s,L+1,R)+s[L]);
			ret=mini(ret,s[R]+go(s,L,R-1)+s[R]);
		}
		dp[L][R]=ret;
	}	
	return dp[L][R];	
}

class ShortPalindromes {
public:string shortest(string base) {	
		string ans;
		memset(seen,0,sizeof seen);
		ans=go(base,0,base.sz-1);
		return ans;		
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	ShortPalindromes *obj;
	string answer;
	obj = new ShortPalindromes();
	clock_t startTime = clock();
	answer = obj->shortest(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "RACE";
	p1 = "ECARACE";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "TOPCODER";
	p1 = "REDTOCPCOTDER";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "Q";
	p1 = "Q";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "MADAMIMADAM";
	p1 = "MADAMIMADAM";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "ALRCAGOEUAOEURGCOEUOOIGFA";
	p1 = "AFLRCAGIOEOUAEOCEGRURGECOEAUOEOIGACRLFA";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
