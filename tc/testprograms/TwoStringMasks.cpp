#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)
#define fill(x,i) memset(x,i,sizeof(x))
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;

class TwoStringMasks {
public:string shortestCommon(string s1, string s2) {	
		int p1=0,p2=0;
		if(s1.sz<s2.sz)swap(s1,s2);
		REP(i,0,s1.sz)if(s1[i]=='*')p1=i;		
		REP(i,0,s2.sz)if(s2[i]=='*')p2=i;
		string aa=s1.substr(0,p1);
		string ab=s1.substr(p1+1);
		string ba=s2.substr(0,p2);
		string bb=s2.substr(p2+1);
		if(aa.sz>ba.sz)swap(aa,ba);
		if(ab.sz>bb.sz)swap(ab,bb);
		REP(i,0,aa.sz)if(aa[i]!=ba[i])return "impossible";
		REP(i,0,ab.sz)if(ab[ab.sz-i-1]!=bb[bb.sz-i-1])return "impossible";
		
		if(ba=="")return bb;
		if(bb=="")return ba;
		if(ba==bb)return ba;
		string ans=ba,aux;
		
		REP(i,0,ba.sz){
			ans=ba.substr(0,i+1);
			aux=ba.substr(i+1);
			if(bb.find(aux)==0)return ans+bb;	
		}		
		return ans;
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	TwoStringMasks *obj;
	string answer;
	obj = new TwoStringMasks();
	clock_t startTime = clock();
	answer = obj->shortestCommon(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "TOPC*DER";
	p1 = "T*PCODER";
	p2 = "TOPCODER";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "HELLO*";
	p1 = "HI*";
	p2 = "impossible";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "GOOD*LUCK";
	p1 = "*";
	p2 = "GOODLUCK";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "*SAMPLETEST";
	p1 = "THIRDSAMPLE*";
	p2 = "THIRDSAMPLETEST";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "*TOP";
	p1 = "*CODER";
	p2 = "impossible";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "*";
	p1 = "A*";
	p2 = "A";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = "*A";
	p1 = "B*";
	p2 = "BA";
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = "LASTCASE*";
	p1 = "*LASTCASE";
	p2 = "LASTCASE";
	all_right = KawigiEdit_RunTest(7, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 8 -----
	p0 = "ABC*ABC";
	p1 = "*BC";
	all_right = KawigiEdit_RunTest(8, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
