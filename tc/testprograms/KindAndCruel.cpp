#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

#define sz size()

#define fill(x,i) memset(x,i,sizeof(x))
#define MAX 32500
string s;
int k,c;
int dp[55][220000];

int go(int index, int wait){
	if((index+1)>=s.sz)return 0;
	if(wait>=MAX)return 1<<25;
	int& ref=dp[index][wait];
	if(ref!=-1)return ref;	
	ref=1<<25;
	bool flag=0;
	if(s[index+1]=='.')ref=min(ref,go(index+1,wait+1)+1);
	if(s[index+1]=='K' && (wait+1)%k!=0)ref=min(ref,go(index+1,wait+1)+1);
	if(s[index+1]=='C' && (wait+1)%c==0)ref=min(ref,go(index+1,wait+1)+1);
	
	if(s[index]=='K' && (wait+1)%k!=0 && flag==0)	ref=min(ref,go(index,wait+1)+1);
	if(s[index]=='C' && (wait+1)%c==0 && flag==0)	ref=min(ref,go(index,wait+1)+1);
	if(s[index]=='.') ref=min(ref,go(index,wait+1)+1);				
	return ref;

}
class KindAndCruel {
public:int crossTheField(string field, int K, int C) {	
		s=field;
		k=K;		
		c=C;
		//cout<<get(2,5)<<endl;
		fill(dp,-1);
		int ans=go(0,0);
		if(ans>=1<<25)return -1;
		return ans;		
	}

};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1 << "," << p2;
	cout << "]" << endl;
	KindAndCruel *obj;
	int answer;
	obj = new KindAndCruel();
	clock_t startTime = clock();
	answer = obj->crossTheField(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = "...";
	p1 = 2;
	p2 = 5;
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = ".K.C.";
	p1 = 3;
	p2 = 4;
	p3 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = ".CCCC.";
	p1 = 3;
	p2 = 5;
	p3 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = ".CKKKKCKKKKC.KKKKCKKKKC.CKKKKCKKKKCKKKKCKKKKCKKKK.";
	p1 = 5;
	p2 = 5;
	p3 = 60;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
