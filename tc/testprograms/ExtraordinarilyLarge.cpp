#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define fill(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long lcm(long long a,long long b){return a*(b/gcd(a,b));}

string conver(string x){
	if(x.find("!")==-1)return tos(toi(x));
	istringstream is(x);
	long long a;
	string aux;
	is>>a>>aux;
	if(a==0)a=1;
	if(a<=2)return conver(tos(a)+aux.substr(1));
	return tos(a)+aux;
}
class ExtraordinarilyLarge {
public:string compare(string x, string y) {	
		x=conver(x);
		y=conver(y);
		int nf=min(count(all(x),'!'), count(all(y),'!'));
		x=x.substr(0,x.sz-nf);
		y=y.substr(0,y.sz-nf);	
		long long a,b,aux;
		a=toi(x);
		b=toi(y);
		if(x.find("!")!=-1){
			nf=count(all(x),'!');
			for(int i=0;i<nf;i++){
				aux=1;
				for(int j=2;j<=a;j++){
					aux*=j;
					if(aux>b)return "x>y";
				}
				a=aux;
			}
			if(a<b)return "x<y";
			if(a==b)return "x=y";			
		}else if(y.find("!")!=-1){
			nf=count(all(y),'!');
			for(int i=0;i<nf;i++){
				aux=1;
				for(int j=2;j<=b;j++){
					aux*=j;
					if(aux>a)return "x<y";
				}
				b=aux;
			}
			if(a>b)return "x>y";
			if(a==b)return "x=y";
		}else{
			if(a>b)return "x>y";
			else if(a<b)return "x<y";
			return "x=y";
		}
		return "";
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	ExtraordinarilyLarge *obj;
	string answer;
	obj = new ExtraordinarilyLarge();
	clock_t startTime = clock();
	answer = obj->compare(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "0!";
	p1 = "1";
	p2 = "x=y";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "9!";
	p1 = "999999999";
	p2 = "x<y";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "9!!";
	p1 = "999999999";
	p2 = "x>y";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "456!!!";
	p1 = "123!!!!!!";
	p2 = "x<y";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "5!";
	p1 = "120";
	p2 = "x=y";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
