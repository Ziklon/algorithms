#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath> 
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <ctime> 
using namespace std; 
typedef long long ll;
int dx[]={0,0,-1,1,1,1,-1,-1};
int dy[]={1,-1,0,0,1,-1,1,-1};
bool vis[55][55];
int N,M;
vector<string> vs;
void dfs(int x, int y, int c){
	if(vis[x][y])return;
	vis[x][y]=1;
	for(int k=0;k<4;k++){
		int X=x+dx[k];
		int Y=y+dy[k];
		if(min(X,Y)>=0 && X<N && Y<M && !vis[X][Y] && vs[X][Y]>=c)
			dfs(X,Y,vs[X][Y]);
	}
}

class FloodRelief {
public:
	int minimumPumps(vector <string> hs) {
		int ans=0;
		N=hs.size();
		M=hs[0].size();
		memset(vis,0,sizeof vis);
		vs=hs;
		while(1){
			int mini=1<<20;
			int x,y;
			for(int i=0;i<N;i++)
				for(int j=0;j<M;j++){
					if(hs[i][j]<mini && vis[i][j]==0){
						mini=hs[i][j];
						x=i;
						y=j;
					}
				}
			if(mini==1<<20)break;
			ans++;
			dfs(x,y,mini);				
		}
		return ans;		
		
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FloodRelief *obj;
	int answer;
	obj = new FloodRelief();
	clock_t startTime = clock();
	answer = obj->minimumPumps(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"ccccc","cbbbc","cbabc","cbbbc","ccccc"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"cbabcbabc","cbabcbabc","cbabcbabc","cbabcbabc"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"ccccccccccc","caaaaaaaaac","caaaaaaaaac","caazpppzaac","caapdddpaac","caapdddpaac","caapdddpaac","caazpppzaac","caaaaaaaaac","caaaaaaaaac","ccccccccccc"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"ab","ba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
