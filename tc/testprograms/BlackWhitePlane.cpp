#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define pb push_back
#define mp make_pair
#define mem(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long _lcm(long long a,long long b){return a*(b/gcd(a,b));}

int sq(int x){
  return x*x;
}

class BlackWhitePlane {
public:double area(vector <string> ci) {	
		double dev=0;
		vector<pair<int,pair<int,int> > > vp;
		for(int i=0;i<ci.sz;i++){
		  int X,Y,R;
		  sscanf(ci[i].c_str(),"%d %d %d",&X,&Y,&R);
		  vp.pb(mp(R,mp(X,Y)));
		}
		sort(rall(vp));
		for(int i=0;i<vp.sz;i++){
			bool ok=1;
			int A,B,C;
			A=vp[i].second.first;
			B=vp[i].second.second;
			C=vp[i].first;
			for(int j=0;j<i;j++){
				int X,Y,R;
				X=vp[j].second.first;
				Y=vp[j].second.second;
				R=vp[j].first;
				if(R>C && sq(A-X)+sq(B-Y)<sq(R)){
					if(ok)ok=0;
					else ok=1;
				}
			}
			if(ok)
			  dev+=M_PI*vp[i].first*vp[i].first;
			else
				dev-=M_PI*vp[i].first*vp[i].first;
		}
		return dev;		
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	BlackWhitePlane *obj;
	double answer;
	obj = new BlackWhitePlane();
	clock_t startTime = clock();
	answer = obj->area(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	double p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"1 1 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3.141592653589793;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"4 3 1","3 2 3","8 1 1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 28.274333882308138;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"15 15 4","15 25 4","25 25 4","25 15 4","25 25 100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 31214.86460606818;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"2549 8482 11","9175 5927 35","2747 6177 93","5512 8791 81","4487 8456 60","6899 610 77","9716 2202 3","9312 5625 79","4020 9851 85","1640 7179 54","5761 4348 51","5917 3436 88","6547 386 33","182 7676 1","6329 4496 89"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 194250.95695676407;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
