#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)
#define fill(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;
typedef long long ll;


class WordsGame {
public:int minimumSwaps(vector <string> grid, string word) {	
		vector<string> v;
		string soword=word;
		sort(all(soword));
		REP(i,0,grid.sz){
			string cur=grid[i];
			sort(all(cur));
			if(cur==soword)
				v.push_back(grid[i]);
		}
		REP(i,0,grid.sz){
			string cur="",aux;
			REP(j,0,grid.sz)cur+=grid[j][i];
			aux=cur;
			sort(all(aux));
			if(aux==soword)
				v.push_back(cur);
		}
		if(v.sz==0)return -1;
		int ans=1<<30;
		REP(i,0,v.sz){
			int cost=0;
			REP(j,0,v[i].sz){
				if(v[i][j]!=word[j]){
					int kpos=v[i].find(word[j]);
					swap(v[i][kpos],v[i][j]);
					cost++;	
				}	
			}
			ans=min(cost,ans);
		}
		
		return ans;		
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	WordsGame *obj;
	int answer;
	obj = new WordsGame();
	clock_t startTime = clock();
	answer = obj->minimumSwaps(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"Mu","uM"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Mu";
	p2 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"sdf","bca","hgf"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "abc";
	p2 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"cdf","bca","agf"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "abc";
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"xSZB","gbHk","kbgH","WFSg"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "bkHg";
	p2 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"eKUNGHktLB","EtBFDndTlG","RRFHmjwrDs","eKYsHlYhlu","ljxyJSwTds","dUQToyWHvl","azDPWRwioE","EARdktoDBh","dmIqcGSvCE","wXypNQEMxz"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "oDmWcJHGNk";
	p2 = 6;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"ab","bA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "aB";
	p2 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
