#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)
#define fill(x,i) memset(x,i,sizeof(x))
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;
vector<string> splitt(string s){
	stringstream ss(s);
	string aux;
	vector<string> v;
	while(ss>>aux)v.push_back(aux);
	return v;
	
}
class SentenceSplitting {
public:int split(string s, int K) {	
		vector<string> v;
		int ans=0,p,n;
		v.push_back(s);
		while(v.sz>0 && K){
			K--;
			n=0;
			p=0;
			REP(i,0,v.sz)
				if(v[i].sz>n){
					n=v[i].sz;
					p=i;	
				}

			vector<string> vs=splitt(v[p]);
			vector<int> vi;
			string a,b;
			REP(i,0,vs.sz)vi.push_back(vs[i].sz);
			bool ok=0;
			for(int i=n/2,j=(n/2)+1;i>=0 && j<n;i--,j++){
				if(v[p][i]==' '){
					a=v[p].substr(0,i);
					b=v[p].substr(i+1);
					ok=1;
					break;
				}
				if(v[p][j]==' '){
					a=v[p].substr(0,j);
					b=v[p].substr(j+1);
					ok=1;
					break;
				}
			}
			if(ok){
				v.erase(v.begin()+p);
				v.push_back(a);
				v.push_back(b);	
			}
		}
		REP(i,0,v.sz)
			ans=max(ans,(int)v[i].sz);
		return ans;
				
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	SentenceSplitting *obj;
	int answer;
	obj = new SentenceSplitting();
	clock_t startTime = clock();
	answer = obj->split(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "This is a test sentence";
	p1 = 1;
	p2 = 13;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "TheOnlyWord";
	p1 = 37;
	p2 = 11;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "One veeeeeeeeeeeeeeeeeeery long word";
	p1 = 2;
	p2 = 22;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "Each tournament round is an elimination round";
	p1 = 3;
	p2 = 15;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
