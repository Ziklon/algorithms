#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#define sz size()
#define REP(i,n) for (int i = 0; i < (int)n; i++)
#define debug(v) cout<<#v<<" = "<<(v)<<endl;

using namespace std;

class MaxFlow{
	public:
		int sink,source;

		MaxFlow(int  _L, int _R){
			L=_L;
			R=_R;
			order=L+R+2;
			source=order-2;sink=source+1;
			adj.resize(order);
			flow.resize(order,vector<int>(order,0));
			for(int i=0;i<L;i++){
				adj[source].push_back(i);
				flow[source][i]=1;				
			}
		}

		void addEdge(int u, int v, int c){			
			if(flow[u][v]==0 && flow[v][u]==0){
				adj[u].push_back(v);
				adj[v].push_back(u);
				flow[u][v]=c;
			}
		}
		void dfs(int u, vector<int>& prev){
			REP(i,adj[u].sz){
				int v=adj[u][i];
				if(prev[v]==-1 && flow[u][v]>0){
					prev[v]=u;
					dfs(v,prev);
				}
			}
		}
		string takenString(){
			string ans;
			REP(i,L)if(flow[source][i]==0){
				ans+=(char)(i);
			}
			return ans;
		}
		int get_flow(){
			int f=0;
			while(1){
				vector<int> prev(order,-1);
				prev[source]=-2;
				dfs(source,prev);	
				if(prev[sink]==-1)return f;				
				for(int v=sink;v!=source;v=prev[v]){
					int u=prev[v];
					flow[u][v]-=1;
					flow[v][u]+=1;
				}
				f+=1;						
			}
			return -1;
		}

	private:
		int L,R,order;
		vector<vector<int> > adj,flow;

};

class Graduation {
public:string moreClasses(string taken, vector <string> req) {	
		string ans;
		vector<int> reqcnt;vector<string> classes;
		
		REP(i,req.sz){
			int num=0;
			int k=0;
			while(k<3 && isdigit(req[i][k])){
				num=(num*10)+req[i][k]-'0';
				k++;
			}			
			reqcnt.push_back(num);
			req[i]=req[i].substr(k);
			classes.push_back(req[i]);
		}
		int L=128;
		int R=req.sz;
		MaxFlow mf(L,R);		
		int sumTotal=0;		
		REP(i,req.sz){
			mf.addEdge(i+L,mf.sink,reqcnt[i]);
			sumTotal+=reqcnt[i];
			REP(j,classes[i].sz){
				if(taken.find(classes[i][j])!=-1){
					mf.addEdge(classes[i][j],i+L,1);
					mf.addEdge(mf.source,classes[i][j],1);					
				}
			}
		}
			
		int prevFlow=mf.get_flow();		
		debug(prevFlow);
		REP(i,req.sz){
			REP(j,classes[i].sz){
				if(taken.find(classes[i][j])==-1){
					mf.addEdge(classes[i][j],i+L,1);
					mf.addEdge(mf.source,classes[i][j],1);					
				}
			}
		}
		int curFlow=mf.get_flow();
		int totalFlow=curFlow+prevFlow;		
		if(totalFlow!=sumTotal)return "0";
		string ret=mf.takenString();
		sort(ret.begin(),ret.end());
		REP(i,ret.sz)if(taken.find(ret[i])==-1 && ans.find(ret[i])==-1)ans+=ret[i];		 
		return ans;		
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Graduation *obj;
	string answer;
	obj = new Graduation();
	clock_t startTime = clock();
	answer = obj->moreClasses(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <string> p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "A";
	string t1[] = {"2ABC","2CDE"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "BCD";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "+/NAMT";
	string t1[] = {"3NAMT","2+/","1M"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "A";
	string t1[] = {"100%*Klju"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "0";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "";
	string t1[] = {"5ABCDE","1BCDE,"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = ",ABCDE";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "CDH";
	string t1[] = {"2AP","3CDEF","1CDEFH"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "AEP";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
