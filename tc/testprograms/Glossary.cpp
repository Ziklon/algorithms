#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#define ll long long
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define pb push_back
#define mp make_pair
#define mem(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();++it)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long lcm(long long a,long long b){return a*(b/gcd(a,b));}
bool orden(string a, string b){
	for(int i=0;i<a.sz;i++)
		a[i]=tolower(a[i]);
	for(int i=0;i<b.sz;i++)
		b[i]=tolower(b[i]);
	return a<b;
}

class Glossary {
public:
	vector <string> buildGlossary(vector <string> items) {
		vector<string> dev;
		for(int i=0;i<150;i++)
			dev.pb(string(40,' '));
		map<char,vector<string> >M;
		for(int i=0;i<items.sz;i++){
			char c=toupper(items[i][0]);
			M[c].pb(items[i]);
		}
		int x=0;
		int y=0;
		
		foreach(M,it){
			if(it->first<='M'){
				dev[x++][0]=it->first;		
				cout<<x<<endl;		
				for(int i=0;i<19;i++)dev[x][i]='-';				
				vector<string> v=it->second;
				sort(all(v),orden);
				for(int i=0;i<v.sz;i++){
					int j=2;
					x++;
					for(int k=0;k<v[i].sz;k++)dev[x][j++]=v[i][k];
				}
				x++;
			}else{
		
				dev[y++][21]=it->first;
				for(int i=21;i<40;i++)dev[y][i]='-';
				vector<string> v=it->second;
				sort(all(v),orden);
				for(int i=0;i<v.sz;i++){
					int j=23;
					y++;
					for(int k=0;k<v[i].sz;k++)dev[y][j++]=v[i][k];
				}
				y++;
				
			}
		}
		
		int p=149;
		while(p>=max(x,y))dev.erase(dev.begin()+p),p--;
		return dev;
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Glossary *obj;
	vector <string> answer;
	obj = new Glossary();
	clock_t startTime = clock();
	answer = obj->buildGlossary(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"Canada","France","Germany","Italy","Japan","Russia","United Kingdom","United States"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"C                    R                  ","-------------------  -------------------","  Canada               Russia           ","F                    U                  ","-------------------  -------------------","  France               United Kingdom   ","G                      United States    ","-------------------                     ","  Germany                               ","I                                       ","-------------------                     ","  Italy                                 ","J                                       ","-------------------                     ","  Japan                                 "};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"alpha","beta","gamma","delta","omega"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"A                    O                  ","-------------------  -------------------","  alpha                omega            ","B                                       ","-------------------                     ","  beta                                  ","D                                       ","-------------------                     ","  delta                                 ","G                                       ","-------------------                     ","  gamma                                 "};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"AVL tree","backtracking","array","balanced tree","binary search"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"A                                       ","-------------------                     ","  array                                 ","  AVL tree                              ","B                                       ","-------------------                     ","  backtracking                          ","  balanced tree                         ","  binary search                         "};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"XXXXXXXXXXXXXXXXX","YYYYYYYYYYYYYYYYY","ZZZZZZZZZZZZZZZZZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"                     X                  ","                     -------------------","                       XXXXXXXXXXXXXXXXX","                     Y                  ","                     -------------------","                       YYYYYYYYYYYYYYYYY","                     Z                  ","                     -------------------","                       ZZZZZZZZZZZZZZZZZ"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"Asteria","Astraeus","Atlas","Clymene","Coeus","Crius","Cronus","Dione","Epimetheus","Helios","Hyperion","Iapetus","Leto","Mnemosyne","Oceanus","Ophion","Phoebe","Prometheus","Rhea","Tethys","Theia","Themis"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"A                    O                  ","-------------------  -------------------","  Asteria              Oceanus          ","  Astraeus             Ophion           ","  Atlas              P                  ","C                    -------------------","-------------------    Phoebe           ","  Clymene              Prometheus       ","  Coeus              R                  ","  Crius              -------------------","  Cronus               Rhea             ","D                    T                  ","-------------------  -------------------","  Dione                Tethys           ","E                      Theia            ","-------------------    Themis           ","  Epimetheus                            ","H                                       ","-------------------                     ","  Helios                                ","  Hyperion                              ","I                                       ","-------------------                     ","  Iapetus  "
			"                             ","L                                       ","-------------------                     ","  Leto                                  ","M                                       ","-------------------                     ","  Mnemosyne                             "};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
