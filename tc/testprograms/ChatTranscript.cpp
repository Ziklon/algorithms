#include <algorithm>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cmath>
using namespace std;

class ChatTranscript {
public:
    int howMany(vector <string> tsc, string name) {
        int dev=0;
        name+=':';        
        for(int i=0;i<tsc.size();i++){
          if(tsc[i].size()>=name.size()){
            int j=0;
            while(j<name.size() && tsc[i][j]==name[j])j++;
            dev+=(j==name.size()?1:0);
          }
        }
        return dev;
    }
    //Powered by [Ziklon] 1.0!!	

};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, string p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	ChatTranscript *obj;
	int answer;
	obj = new ChatTranscript();
	clock_t startTime = clock();
	answer = obj->howMany(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"Bob: Hello Tim.","Tim: Hello Bob.","Bob: How are ya Tim?","Frank: Stop chatting!"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Bob";
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"Bob: This is a long","sentence that takes 2 lines.","Tim: Yes it is.","Bob : I am not Bob.","Frank: No you aren't!"," Bob: Neither am I."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Bob";
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"Crazy1010: !@LK%#L%K @#L%K @#L%K@#L%K2kl53k2","Bob: You are crazy.","Crazy1010 Yup #@LK%$L!K%LK%!K% !K afmas,"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Crazy1010";
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"A:A:A:A:A:A:A:A:A","b:b:b:b:b:b:b:b:b"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "B";
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"A:A:A:A:A:A:A:A:A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "A";
	p2 = 1;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING// Powered by FileEdit
// Powered by CodeProcessor
