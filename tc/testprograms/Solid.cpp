#include <vector>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
using namespace std;

#define sz size()
#define REP(i,a,b) for(int i=int(a);i<int(b);i++)

int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};
int vis[55][55];
int get(vector<string>&v, int x, int y, char c){
	int ans=0;
	REP(i,0,4){
		int X=x+dx[i];
		int Y=y+dy[i];
		if(min(X,Y)>=0 && X<v.sz&& Y<v[0].sz && v[X][Y]==c)
			ans++;

	}
	return ans;

}
class Solid {
public:int surfaceArea(vector <string> solid) {	
		int ans=0;
		for(char c='9';c>'1';c--){
			REP(i,0,solid.sz)
				REP(j,0,solid[i].sz)
					if(solid[i][j]==c)ans+=4-get(solid,i,j,c);				
			REP(i,0,solid.sz)
				REP(j,0,solid[i].sz)if(solid[i][j]==c)
										solid[i][j]--;			
		}
		REP(i,0,solid.sz)
			REP(j,0,solid[i].sz)if(solid[i][j]=='1')ans+=6-get(solid,i,j,'1');

		return ans;		
	}

};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Solid *obj;
	int answer;
	obj = new Solid();
	clock_t startTime = clock();
	answer = obj->surfaceArea(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"11"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"4231","2101","0001"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 54;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"0000000000000000000","0000000111111111100","0001111111111111100","0111111222111110000","0111111122111111000","0111111111111111000","0000000000000000000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 190;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"000000528711731016006000000000","000005195794786382818000000000","000000152759877615783700000000","000000538691532646444720000000","000448878233764358916526040000","000957681868472329823514746000","000468262265258953611195968000","353414949614353741985971227000","523414326739461146956185360000","883755114476244883219144444000","382853216452287831155934152000","582346653747546124514813113000","872646187355968637442125842000","488795678641528974985428554900","184834779675978184943349141300","466455559389179259181268463686","577566824847934671312749443414","879443115123574825441232482522","813346335659785489878484611130","913125858434291686688282682100","276982916388781784196666212965","171998843675177318752563287763","639855577925843147586517873468","527868897287142566166897778388","513544481355194141741396768845","148819842161491541656585512420","014784988399688355411932978550","008427963354683469419487790000","007889062567387593411210000000","000000005778849898967400000000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6280;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"111","101","111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 32;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"5"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 22;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
