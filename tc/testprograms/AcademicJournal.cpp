#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath> 
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <ctime> 
using namespace std; 

typedef pair<int,int> pii;

bool orden(pair<string,pii>p, pair<string,pii> q){
	int a=p.second.first;
	int b=p.second.second;
	int c=q.second.first;
	int d=q.second.second;
	if(a*d!=c*b)return a*d>c*b;
	if(b!=d)return b>d;
	return p.first<q.first;
}

class AcademicJournal {
public:
	vector <string> rankByImpact(vector <string> papers) {

		int n=papers.size();
		map<string,pair<int,int> >M;
		map<string,int>numpapers;
		vector<string> match;
		for(int i=0;i<n;i++){			
			int index=papers[i].find('.');
			string curpaper=papers[i].substr(0,index);
			match.push_back(curpaper);
			numpapers[curpaper]++;			
		}
		for(int i=0;i<n;i++)
			M[match[i]].second=numpapers[match[i]];

		for(int i=0;i<n;i++){
			int index=papers[i].find('.'),tmp;
			string from=papers[i].substr(0,index);
			string reference=papers[i].substr(index+1);
			istringstream is(reference);
			set<int> S;
			while(is>>tmp)S.insert(tmp);
			vector<int> vi(S.begin(),S.end());
			for(int j=0;j<vi.size();j++){
				string to=match[vi[j]];
				if(from!=to){
					M[to].first++;							
				}
			}				
		}
		vector<pair<string,pii> >v(M.begin(),M.end());
		sort(v.begin(),v.end(),orden);
		vector<string> ans;
		for(int i=0;i<v.size();i++)
			ans.push_back(v[i].first);

		return ans;			
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	AcademicJournal *obj;
	vector <string> answer;
	obj = new AcademicJournal();
	clock_t startTime = clock();
	answer = obj->rankByImpact(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"A.","B. 0","C. 1 0 3","C. 2"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"A","B","C"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"RESPECTED JOURNAL.","MEDIOCRE JOURNAL. 0","LOUSY JOURNAL. 0 1","RESPECTED JOURNAL.","MEDIOCRE JOURNAL. 3","LOUSY JOURNAL. 4 3 3 4","RESPECTED SPECIFIC JOURNAL.","MEDIOCRE SPECIFIC JOURNAL. 6","LOUSY SPECIFIC JOURNAL. 6 7"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RESPECTED JOURNAL","RESPECTED SPECIFIC JOURNAL","MEDIOCRE JOURNAL","MEDIOCRE SPECIFIC JOURNAL","LOUSY JOURNAL","LOUSY SPECIFIC JOURNAL"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"NO CITATIONS.","COMPLETELY ORIGINAL."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"COMPLETELY ORIGINAL","NO CITATIONS"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"CONTEMPORARY PHYSICS. 5 4 6 8 7 1 9","EUROPHYSICS LETTERS. 9","J PHYS CHEM REF D. 5 4 6 8 7 1 9","J PHYS SOC JAPAN. 5 4 6 8 7 1 9","PHYSICAL REVIEW LETTERS. 5 6 8 7 1 9","PHYSICS LETTERS B. 6 8 7 1 9","PHYSICS REPORTS. 8 7 1 9","PHYSICS TODAY. 1 9","REP PROGRESS PHYSICS. 7 1 9","REV MODERN PHYSICS."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"REV MODERN PHYSICS","EUROPHYSICS LETTERS","PHYSICS TODAY","REP PROGRESS PHYSICS","PHYSICS REPORTS","PHYSICS LETTERS B","PHYSICAL REVIEW LETTERS","CONTEMPORARY PHYSICS","J PHYS CHEM REF D","J PHYS SOC JAPAN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
