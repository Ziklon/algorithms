#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define fill(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long lcm(long long a,long long b){return a*(b/gcd(a,b));}
string toss(vector<int>v){
	stringstream ss;
	for(int i=0;i<v.sz;i++)ss<<" "<<v[i];
	return ss.str().substr(1);
}
class RailroadSeatNumeration {
public:string getInternational(vector <int> tk) {	
		map<int,bool>D;
		int sets[]={1,3,4,6};
		map<int,int>M;
		for(int i=1;i<10;i++){			
			for(int j=0;j<4;j++){
				D[i*10+ sets[j]]=1;
				M[((i-1)*4)+(j+1)]=i*10+ sets[j];
			}
		}
		vector<int> v(tk.sz);
		bool a=1,b=1;
		for(int i=0;i<tk.sz;i++){
			if(M[tk[i]]==0)a=0;
			v[i]=M[tk[i]];
		}
		for(int i=0;i<tk.sz;i++)
			if(D[tk[i]]==0)b=0;
		if(a && b)return "AMBIGUOUS";
		if(a)return toss(v);
		if(b)return toss(tk);
		
		return "BAD DATA";
		
		
						
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	RailroadSeatNumeration *obj;
	string answer;
	obj = new RailroadSeatNumeration();
	clock_t startTime = clock();
	answer = obj->getInternational(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	string p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "11";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {11};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "AMBIGUOUS";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {45};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "BAD DATA";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {5,7,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "21 24 23";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {21,24,23};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "AMBIGUOUS";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {8,28};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "26 76";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
