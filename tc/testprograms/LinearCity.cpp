#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define fill(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long lcm(long long a,long long b){return a*(b/gcd(a,b));}
bool R[51][51];
bool L[51][51];
bool vis[55];
int N;
bool dfs(int p, int k){
	if(p==k)return 1;
	vis[p]=1;
	bool ans=0;
	for(int j=0;j<N;j++)
		if(R[p][j] && !vis[j])
			ans|=dfs(j,k);
	return ans;
}

class LinearCity {
public:vector <string> getReference(vector <int> refSource, vector <int> refDestination, string refDirection, int N, vector <int> source, vector <int> destination) {	
		
		fill(R,0);
		for(int i=0;i<refSource.sz;i++){
			if(refDirection[i]=='R'){
				R[refSource[i]][refDestination[i]]=1;
			}else{
				R[refDestination[i]][refSource[i]]=1;
			}
		}
		::N=N;
		vector<string>ans;
		for(int i=0;i<source.sz;i++){
			int val=source[i];
			fill(vis,0);
			if(dfs(val,destination[i]))ans.push_back("RIGHT");
			else{
				fill(vis,0);
				if(dfs(destination[i],val))ans.push_back("LEFT");
				else
					ans.push_back("UNKNOWN");				
			}
		}
		return ans;			
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, string p2, int p3, vector <int> p4, vector <int> p5, bool hasAnswer, vector <string> p6) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "\"" << p2 << "\"" << "," << p3 << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p5.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p5[i];
	}
	cout << "}";
	cout << "]" << endl;
	LinearCity *obj;
	vector <string> answer;
	obj = new LinearCity();
	clock_t startTime = clock();
	answer = obj->getReference(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p6.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p6[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p6.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p6[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	string p2;
	int p3;
	vector <int> p4;
	vector <int> p5;
	vector <string> p6;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "RR";
	p3 = 3;
	int t4[] = {1,0};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,1};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	string t6[] = {"RIGHT","LEFT"};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "RL";
	p3 = 3;
	int t4[] = {1,0};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,1};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	string t6[] = {"RIGHT","LEFT"};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {2,3,1,0,2,0,5,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,4,4,4,4,3,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "RLRLRLLL";
	p3 = 6;
	int t4[] = {0,1,0};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {2,3,5};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	string t6[] = {"LEFT","RIGHT","UNKNOWN"};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,0,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,2,3,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "RRRL";
	p3 = 5;
	int t4[] = {0,2,3,0,4};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {2,4,1,1,0};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	string t6[] = {"RIGHT","UNKNOWN","LEFT","LEFT","UNKNOWN"};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {6,0,0,5,2,4,1,1,1,6,2,0,2,2,3,1,5,1,5,6,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {4,6,4,2,6,3,2,4,5,5,3,1,0,4,0,6,4,3,3,3,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "RLRLRRRRRRRLRRLRRRRRL";
	p3 = 7;
	int t4[] = {5,6,2,4,6,2,4};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	int t5[] = {0,0,0,5,2,5,6};
			p5.assign(t5, t5 + sizeof(t5) / sizeof(t5[0]));
	string t6[] = {"RIGHT","RIGHT","RIGHT","LEFT","LEFT","RIGHT","LEFT"};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
