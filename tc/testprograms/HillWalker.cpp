#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath> 
#include <set>
#include <map>
#include <queue>
#include <vector>
#include <iostream>
#include <algorithm>
#include <sstream>
#include <ctime> 
#define INF 1<<29
using namespace std; 

int dx[8]={0,0,1,-1,1,-1,1,-1};
int dy[8]={1,-1,0,0,1,-1,-1,1};
vector<string> M;
int getHih(char c){
	if(c>='A' && c<='Z')return c-'A';
	return (c-'a'+26);
}
int dijkstra(int a, int b, int c, int d, int hih){
	int D[30][30];
	for(int i=0;i<30;i++)for(int j=0;j<30;j++)D[i][j]=INF;

	priority_queue<pair<int,pair<int,int > > > Q;	
	D[a][b]=0;
	Q.push(make_pair(0,make_pair(a,b)));
	while(!Q.empty()){
		int cost=abs(Q.top().first);
		int x=Q.top().second.first;
		int y=Q.top().second.second; 
		Q.pop();

		if(x==c && y==d)return cost;

		for(int i=0;i<4;i++){
			int X=x+dx[i];
			int Y=y+dy[i];
			if(min(X,Y)>=0 && X<M.size() && Y<M[0].size()){
				int dif=getHih(M[X][Y]) - getHih(M[x][y]);
				if(abs(dif)<=hih){
					int newCost=cost;
					if(dif<=0)
						newCost+=1;
					else
						newCost+=(abs(dif)*abs(dif));
					if(D[X][Y]>newCost){
						Q.push(make_pair(-newCost,make_pair(X,Y)));
						D[X][Y]=newCost;
					}
				}
			}
		}

	}
	return INF;	

}

class HillWalker {
public:
	int highestPoint(vector <string> landscape, int threshold, int timeToDark) {
		M=landscape;
		int ans=0;
		for(int i=0;i<M.size();i++)for(int j=0;j<M[0].size();j++){

			int cost=dijkstra(0,0,i,j,threshold)+dijkstra(i,j,0,0,threshold);
			if(cost<=timeToDark)
				ans=max(ans,getHih(M[i][j]));
		}
		return ans;
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	HillWalker *obj;
	int answer;
	obj = new HillWalker();
	clock_t startTime = clock();
	answer = obj->highestPoint(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"AD","JG"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 10000;
	p3 = 9;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"AD","JG"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 29;
	p3 = 6;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"AABCDE","GJIHGF","MKLMNO","STSRQP","YUVWXY","edcbaZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	p2 = 36;
	p3 = 30;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"BCDE","AJKF","AIHG","AAAA","AOMK","AQSI","ACEG"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 14;
	p3 = 10;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"BCDE","AJKF","AIHG","AAAA","AOMK","AQSI","ACEG"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 57;
	p3 = 18;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"ABCDEFK"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 1000;
	p3 = 5;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"TRRVUXefk","bSNMOWcff","bRPNNQZip","XSRUTVcfj","WbZQPXZbV","XdYSRWVOP","feedVVcZR","XhfdZZefg"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 50;
	p3 = 28;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
