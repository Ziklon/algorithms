#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define pb push_back
#define mp make_pair
#define mem(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
#define f(i,n) for(int (i)=0;i<(int)(n);(i)++)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long lcm(long long a,long long b){return a*(b/gcd(a,b));}
class GolfScore {
public:int tally(vector <int> parValues, vector <string> scoreSheet) {	
		int dev=0;
		for(int i=0;i<parValues.sz;i++){
			int x=parValues[i];
			if(scoreSheet[i]=="triple bogey")x+=3;
			if(scoreSheet[i]=="double bogey")x+=2;
			if(scoreSheet[i]=="bogey")x+=1;
			if(scoreSheet[i]=="birdie")x-=1;
			if(scoreSheet[i]=="eagle")x-=2;
			if(scoreSheet[i]=="albatross")x-=3;
			if(scoreSheet[i]=="hole in one")x=1;
			dev+=x;
		}
		return dev;		
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	GolfScore *obj;
	int answer;
	obj = new GolfScore();
	clock_t startTime = clock();
	answer = obj->tally(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"bogey","bogey","bogey","bogey","bogey","bogey","bogey","bogey","bogey","eagle","eagle","eagle","eagle","eagle","eagle","eagle","eagle","eagle"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 45;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {3,2,4,2,2,1,1,1,3,2,4,4,4,2,3,1,3,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"bogey","double bogey","par","double bogey","double bogey","triple bogey","triple bogey","triple bogey","bogey","double bogey","par","par","par","double bogey","bogey","triple bogey","bogey","double bogey"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 72;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {3,2,4,2,2,1,1,1,3,2,4,4,4,2,3,1,3,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"eagle","birdie","albatross","birdie","birdie","par","hole in one","par","eagle","birdie","albatross","albatross","albatross","birdie","eagle","hole in one","eagle","birdie"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 18;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {4,1,3,3,4,4,1,4,2,3,3,5,4,1,4,4,2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"triple bogey","triple bogey","bogey","par","triple bogey","double bogey","triple bogey","triple bogey","par","eagle","bogey","bogey","birdie","par","triple bogey","eagle","triple bogey","triple bogey"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 77;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
