#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz size()
#define fill(x,i) memset(x,i,sizeof(x))
#define cpresent(V,e) (find(all(V),(e))!=(V).end())
#define foreach(c,it) for(__typeof((c).begin()) it=(c).begin();it!=(c).end();it++)
using namespace std;
long long toi(string s){istringstream is(s);long long x;is>>x;return x;}
string tos(long long t){stringstream st; st<<t;return st.str();}
long long gcd(long long a, long long b){return __gcd(a,b);}
long long lcm(long long a,long long b){return a*(b/gcd(a,b));}
int dx[]={1,1,2,2,-1,-1,-2,-2};
int dy[]={2,-2,1,-1,2,-2,1,-1};
bool vis[12][12];
struct node{
	int x, y, c, m;
	node(int _x, int _y, int _c, int _m){
		x=_x;
		y=_y;
		c=_c;
		m=_m;
	}
	node(){}
};

class CollectingRiders {
public:int minimalMoves(vector <string> board) {	
		int nv=0,liz=1<<30;
		for(int i=0;i<board.sz;i++)
			for(int j=0;j<board[i].sz;j++)
				if(isdigit(board[i][j]))nv++;
		if(nv<=1)return 0;
		
		for(int i=0;i<board.sz;i++)for(int j=0;j<board[i].sz;j++){
			int res=0,val;
			bool ok=1;
			for(int m=0;m<board.sz && ok;m++)for(int n=0;n<board[m].sz && ok;n++){
				if(isdigit(board[m][n])){
					queue<node>Q;
					Q.push(node(m,n,0,board[m][n]-'0'));
					fill(vis,0);
					vis[m][n]=1;
					ok=0;
					while(!Q.empty() && !ok){
						node cur=Q.front();
						Q.pop();
						val=(cur.c+cur.m-1)/cur.m; 
						if(cur.x==i && cur.y==j){
							ok=1;
							res+=val;							
						}
						for(int p=0;p<8;p++){
							int X=cur.x+dx[p];
							int Y=cur.y+dy[p];
							if(X>=0 && Y>=0 && X<board.sz && Y<board[0].sz && !vis[X][Y]){
								Q.push(node(X,Y,cur.c+1,cur.m));
								vis[X][Y]=1;
							}
						}
					}
				}
			}
			if(ok)liz=min(liz,res);
		}
		if(liz>=1<<30)return -1;	
		return liz;		
	}
	//Powered by [Ziklon]
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CollectingRiders *obj;
	int answer;
	obj = new CollectingRiders();
	clock_t startTime = clock();
	answer = obj->minimalMoves(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"...1","....","2..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"........",".1......","........","....3...","........","........",".7......","........"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"..","2.",".."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {".1....1."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"9133632343","5286698232","8329333369","5425579782","4465864375","8192124686","3191624314","5198496853","1638163997","6457337215"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 121;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
