#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
#define sz size()
#define REP(i,n) for (int i = 0; i < (int)n; i++)
#define debug(v) cout<<#v<<" = "<<(v)<<endl;
#define adebug(x,n) cout <<#x<<endl; REP(i,n)cout<<x[i]<<char(i+1==n?10:32)
#define mdebug(x,m,n) cout <<#x<<endl; REP(i,m)REP(j,n)cout<<x[i][j]<<char(j+1==n?10:32)
using namespace std;
#define INF 1<<30
typedef long long ll;
pair<int,int> M[55];
int N;
ll dist[55][55][2];
struct node{
	int L,R,D,C;
	node(int _L, int _R, int _D, int _C){
		L=_L;
		R=_R;
		D=_D;
		C=_C;
	}
	bool operator < (node p)const{
		return C>p.C;
	}
	
};

//void relax(int i,int j, int k, )

class FastPostman {
public:int minTime(vector <int> address, vector <int> maxTime, int initialPos) {	
		ll ans=INF;
		N=address.size();
		REP(i,N)M[i]=make_pair(address[i],maxTime[i]);		
		sort(M,M+N);
		

		
		priority_queue<node>Q;
		REP(i,N)REP(j,N)dist[i][j][0]=dist[i][j][1]=INF;
		
		REP(i,N){
			ll tmp=abs(initialPos-M[i].first);
			if(tmp>M[i].second)tmp=INF;
			dist[i][i][0]=dist[i][i][1]=tmp;
			if(tmp<INF){
				Q.push(node(i,i,0,tmp));
			}
		}
		while(!Q.empty()){
			node cur=Q.top();Q.pop();
			
			//cout<<cur.L<<" "<<cur.R<<" "<<cur.D<<" "<<cur.C<<endl; 
			if(cur.L==0 && cur.R==N-1)return cur.C;			
			if(cur.D==0){
				if(cur.L>0){
					ll nc=cur.C+abs(M[cur.L].first-M[cur.L-1].first);
					if(nc<=M[cur.L-1].second && dist[cur.L-1][cur.R][0]>nc ){					
						dist[cur.L-1][cur.R][0]=nc;						
						Q.push(node(cur.L-1,cur.R,0,nc));
					}
				}				
				if(cur.R+1<N){
					ll nc=(cur.C+abs(M[cur.L].first-M[cur.R+1].first));
					if(nc<=M[cur.R+1].second && dist[cur.L][cur.R+1][1]>nc){
						dist[cur.L][cur.R+1][1]=nc;
						Q.push(node(cur.L,cur.R+1,1,nc));
					}
				}						
			}else{
				if(cur.L>0){
					ll nc=(cur.C+abs(M[cur.R].first-M[cur.L-1].first));
					if(nc<=M[cur.L-1].second && dist[cur.L-1][cur.R][0]>nc){
						dist[cur.L-1][cur.R][0]=nc;
						Q.push(node(cur.L-1,cur.R,0,nc));
					}
				}				
				if(cur.R+1<N){
					ll nc=(cur.C+abs(M[cur.R].first-M[cur.R+1].first));
					if(nc<=M[cur.R+1].second&& dist[cur.L][cur.R+1][1]> nc){
						dist[cur.L][cur.R+1][1]=nc;
						Q.push(node(cur.L,cur.R+1,1,nc));
					}
				}	
			}										
		}
		
		return -1;		
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	FastPostman *obj;
	int answer;
	obj = new FastPostman();
	clock_t startTime = clock();
	answer = obj->minTime(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {1,3,5,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9,2,5,100};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	p3 = 13;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {6,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 6;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1000000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {45634};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 876;
	p3 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,7,10,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {15,6,28,39};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 20;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1000000,1000000,1000000,1000000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {563,23452,32426,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1000000;
	p3 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
