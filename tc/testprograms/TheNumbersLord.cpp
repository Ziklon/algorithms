#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <algorithm>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <ctime>
using namespace std;
string tos(int a){
	stringstream ss;
	ss<<a;
	return ss.str();
}
string maxi(string a, string b){

	if(a.size()!=b.size()){
		if(a.size()>b.size())return a;
		return b;
	}
	for(int i=0;i<a.size();i++){
		if(a[i]>b[i])return a;
		if(b[i]>a[i])return b;
	}
	return b;
}

bool comp(int a, int b){
	string sa=tos(a);
	string sb=tos(b);
	string  aa=sa+sb;
	string bb=sb+sa;
	if(maxi(aa,bb)==aa)return 1;
	return 0;
}

class TheNumbersLord {
public:string create(vector <int> numbers, int n) {	
		string ans;
		vector<int> v;
		int N=numbers.size();
		for(int i=0;i<numbers.size();i++)v.push_back(numbers[i]);
		sort(v.begin(),v.end(),comp);
		sort(numbers.begin(),numbers.end());

		vector<string> vs;
		for(int i=0;i<v.size();i++)vs.push_back(tos(v[i]));
		int leaft=n-numbers.size();
		string tmp;
		while(leaft){
			tmp+=tos(numbers[N-1]);
			leaft--;
		}
		for(int i=0;i<=vs.size();i++){
			string left,right;
			for(int j=0;j<i;j++)left+=vs[j];
			for(int j=i;j<vs.size();j++)right+=vs[j];
			string aaa=left+tmp+right;
			ans=maxi(aaa,ans);
		}
		return ans;		
	}
};



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	TheNumbersLord *obj;
	string answer;
	obj = new TheNumbersLord();
	clock_t startTime = clock();
	answer = obj->create(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	int t0[] = {3,2,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = "732";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {4,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = "7774";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,10,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = "110100100";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {4,4,4,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 9;
	p2 = "444444444";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = "211";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
//With unused code cleaner (beta) by ahmed_aly
